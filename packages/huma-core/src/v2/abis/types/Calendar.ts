/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface CalendarInterface extends utils.Interface {
  functions: {
    'getDaysDiff(uint256,uint256)': FunctionFragment
    'getDaysDiffSincePreviousPeriodStart(uint8,uint256,uint256)': FunctionFragment
    'getDaysRemainingInPeriod(uint256)': FunctionFragment
    'getNumPeriodsPassed(uint8,uint256,uint256)': FunctionFragment
    'getStartDateOfNextPeriod(uint8,uint256)': FunctionFragment
    'getStartDateOfPeriod(uint8,uint256)': FunctionFragment
    'getStartOfNextDay(uint256)': FunctionFragment
    'getTotalDaysInFullPeriod(uint8)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'getDaysDiff'
      | 'getDaysDiffSincePreviousPeriodStart'
      | 'getDaysRemainingInPeriod'
      | 'getNumPeriodsPassed'
      | 'getStartDateOfNextPeriod'
      | 'getStartDateOfPeriod'
      | 'getStartOfNextDay'
      | 'getTotalDaysInFullPeriod',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'getDaysDiff',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getDaysDiffSincePreviousPeriodStart',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'getDaysRemainingInPeriod',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getNumPeriodsPassed',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'getStartDateOfNextPeriod',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getStartDateOfPeriod',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getStartOfNextDay',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalDaysInFullPeriod',
    values: [PromiseOrValue<BigNumberish>],
  ): string

  decodeFunctionResult(functionFragment: 'getDaysDiff', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getDaysDiffSincePreviousPeriodStart',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDaysRemainingInPeriod',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNumPeriodsPassed',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStartDateOfNextPeriod',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStartDateOfPeriod',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStartOfNextDay',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTotalDaysInFullPeriod',
    data: BytesLike,
  ): Result

  events: {}
}

export interface Calendar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: CalendarInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getDaysDiff(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { daysDiff: BigNumber }>

    getDaysDiffSincePreviousPeriodStart(
      periodDuration: PromiseOrValue<BigNumberish>,
      numPeriodsPassed: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { daysDiff: BigNumber }>

    getDaysRemainingInPeriod(
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { daysRemaining: BigNumber }>

    getNumPeriodsPassed(
      periodDuration: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { numPeriodsPassed: BigNumber }>

    getStartDateOfNextPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { startOfNextPeriod: BigNumber }>

    getStartDateOfPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { startOfPeriod: BigNumber }>

    getStartOfNextDay(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { startOfNextDay: BigNumber }>

    getTotalDaysInFullPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { totalDaysInPeriod: BigNumber }>
  }

  getDaysDiff(
    startDate: PromiseOrValue<BigNumberish>,
    endDate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getDaysDiffSincePreviousPeriodStart(
    periodDuration: PromiseOrValue<BigNumberish>,
    numPeriodsPassed: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getDaysRemainingInPeriod(
    endDate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getNumPeriodsPassed(
    periodDuration: PromiseOrValue<BigNumberish>,
    startDate: PromiseOrValue<BigNumberish>,
    endDate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStartDateOfNextPeriod(
    periodDuration: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStartDateOfPeriod(
    periodDuration: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStartOfNextDay(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getTotalDaysInFullPeriod(
    periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  callStatic: {
    getDaysDiff(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDaysDiffSincePreviousPeriodStart(
      periodDuration: PromiseOrValue<BigNumberish>,
      numPeriodsPassed: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDaysRemainingInPeriod(
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNumPeriodsPassed(
      periodDuration: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStartDateOfNextPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStartDateOfPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStartOfNextDay(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTotalDaysInFullPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    getDaysDiff(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDaysDiffSincePreviousPeriodStart(
      periodDuration: PromiseOrValue<BigNumberish>,
      numPeriodsPassed: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDaysRemainingInPeriod(
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNumPeriodsPassed(
      periodDuration: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStartDateOfNextPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStartDateOfPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStartOfNextDay(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTotalDaysInFullPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getDaysDiff(
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getDaysDiffSincePreviousPeriodStart(
      periodDuration: PromiseOrValue<BigNumberish>,
      numPeriodsPassed: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getDaysRemainingInPeriod(
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getNumPeriodsPassed(
      periodDuration: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStartDateOfNextPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStartDateOfPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStartOfNextDay(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTotalDaysInFullPeriod(
      periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
