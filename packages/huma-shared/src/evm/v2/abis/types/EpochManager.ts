/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace EpochManager {
  export type CurrentEpochStruct = {
    id: PromiseOrValue<BigNumberish>
    endTime: PromiseOrValue<BigNumberish>
  }

  export type CurrentEpochStructOutput = [BigNumber, BigNumber] & {
    id: BigNumber
    endTime: BigNumber
  }
}

export interface EpochManagerInterface extends utils.Interface {
  functions: {
    'calendar()': FunctionFragment
    'closeEpoch()': FunctionFragment
    'currentEpoch()': FunctionFragment
    'currentEpochId()': FunctionFragment
    'initialize(address)': FunctionFragment
    'juniorTranche()': FunctionFragment
    'minAmountToProcessPerEpoch()': FunctionFragment
    'pool()': FunctionFragment
    'poolConfig()': FunctionFragment
    'poolSafe()': FunctionFragment
    'seniorTranche()': FunctionFragment
    'setPoolConfig(address)': FunctionFragment
    'startNewEpoch()': FunctionFragment
    'updatePoolConfigData()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'calendar'
      | 'closeEpoch'
      | 'currentEpoch'
      | 'currentEpochId'
      | 'initialize'
      | 'juniorTranche'
      | 'minAmountToProcessPerEpoch'
      | 'pool'
      | 'poolConfig'
      | 'poolSafe'
      | 'seniorTranche'
      | 'setPoolConfig'
      | 'startNewEpoch'
      | 'updatePoolConfigData',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'calendar', values?: undefined): string
  encodeFunctionData(functionFragment: 'closeEpoch', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'currentEpoch',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'currentEpochId',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'juniorTranche',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'minAmountToProcessPerEpoch',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string
  encodeFunctionData(functionFragment: 'poolConfig', values?: undefined): string
  encodeFunctionData(functionFragment: 'poolSafe', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'seniorTranche',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolConfig',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'startNewEpoch',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'updatePoolConfigData',
    values?: undefined,
  ): string

  decodeFunctionResult(functionFragment: 'calendar', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'closeEpoch', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'currentEpoch',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentEpochId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'juniorTranche',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'minAmountToProcessPerEpoch',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolSafe', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'seniorTranche',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolConfig',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'startNewEpoch',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatePoolConfigData',
    data: BytesLike,
  ): Result

  events: {
    'EpochClosed(uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'NewEpochStarted(uint256,uint256)': EventFragment
    'PoolConfigCacheUpdated(address)': EventFragment
    'PoolConfigChanged(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'EpochClosed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewEpochStarted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigCacheUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigChanged'): EventFragment
}

export interface EpochClosedEventObject {
  epochId: BigNumber
  seniorTrancheAssets: BigNumber
  seniorTranchePrice: BigNumber
  juniorTrancheAssets: BigNumber
  juniorTranchePrice: BigNumber
  unprocessedAmount: BigNumber
}
export type EpochClosedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  EpochClosedEventObject
>

export type EpochClosedEventFilter = TypedEventFilter<EpochClosedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface NewEpochStartedEventObject {
  epochId: BigNumber
  endTime: BigNumber
}
export type NewEpochStartedEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewEpochStartedEventObject
>

export type NewEpochStartedEventFilter = TypedEventFilter<NewEpochStartedEvent>

export interface PoolConfigCacheUpdatedEventObject {
  poolConfig: string
}
export type PoolConfigCacheUpdatedEvent = TypedEvent<
  [string],
  PoolConfigCacheUpdatedEventObject
>

export type PoolConfigCacheUpdatedEventFilter =
  TypedEventFilter<PoolConfigCacheUpdatedEvent>

export interface PoolConfigChangedEventObject {
  newPoolConfig: string
  oldPoolConfig: string
}
export type PoolConfigChangedEvent = TypedEvent<
  [string, string],
  PoolConfigChangedEventObject
>

export type PoolConfigChangedEventFilter =
  TypedEventFilter<PoolConfigChangedEvent>

export interface EpochManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: EpochManagerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    calendar(overrides?: CallOverrides): Promise<[string]>

    closeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    currentEpoch(
      overrides?: CallOverrides,
    ): Promise<[EpochManager.CurrentEpochStructOutput]>

    currentEpochId(overrides?: CallOverrides): Promise<[BigNumber]>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    juniorTranche(overrides?: CallOverrides): Promise<[string]>

    minAmountToProcessPerEpoch(overrides?: CallOverrides): Promise<[BigNumber]>

    pool(overrides?: CallOverrides): Promise<[string]>

    poolConfig(overrides?: CallOverrides): Promise<[string]>

    poolSafe(overrides?: CallOverrides): Promise<[string]>

    seniorTranche(overrides?: CallOverrides): Promise<[string]>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    startNewEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  calendar(overrides?: CallOverrides): Promise<string>

  closeEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  currentEpoch(
    overrides?: CallOverrides,
  ): Promise<EpochManager.CurrentEpochStructOutput>

  currentEpochId(overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    _poolConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  juniorTranche(overrides?: CallOverrides): Promise<string>

  minAmountToProcessPerEpoch(overrides?: CallOverrides): Promise<BigNumber>

  pool(overrides?: CallOverrides): Promise<string>

  poolConfig(overrides?: CallOverrides): Promise<string>

  poolSafe(overrides?: CallOverrides): Promise<string>

  seniorTranche(overrides?: CallOverrides): Promise<string>

  setPoolConfig(
    _poolConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  startNewEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updatePoolConfigData(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    calendar(overrides?: CallOverrides): Promise<string>

    closeEpoch(overrides?: CallOverrides): Promise<void>

    currentEpoch(
      overrides?: CallOverrides,
    ): Promise<EpochManager.CurrentEpochStructOutput>

    currentEpochId(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    juniorTranche(overrides?: CallOverrides): Promise<string>

    minAmountToProcessPerEpoch(overrides?: CallOverrides): Promise<BigNumber>

    pool(overrides?: CallOverrides): Promise<string>

    poolConfig(overrides?: CallOverrides): Promise<string>

    poolSafe(overrides?: CallOverrides): Promise<string>

    seniorTranche(overrides?: CallOverrides): Promise<string>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    startNewEpoch(overrides?: CallOverrides): Promise<void>

    updatePoolConfigData(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'EpochClosed(uint256,uint256,uint256,uint256,uint256,uint256)'(
      epochId?: null,
      seniorTrancheAssets?: null,
      seniorTranchePrice?: null,
      juniorTrancheAssets?: null,
      juniorTranchePrice?: null,
      unprocessedAmount?: null,
    ): EpochClosedEventFilter
    EpochClosed(
      epochId?: null,
      seniorTrancheAssets?: null,
      seniorTranchePrice?: null,
      juniorTrancheAssets?: null,
      juniorTranchePrice?: null,
      unprocessedAmount?: null,
    ): EpochClosedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'NewEpochStarted(uint256,uint256)'(
      epochId?: null,
      endTime?: null,
    ): NewEpochStartedEventFilter
    NewEpochStarted(epochId?: null, endTime?: null): NewEpochStartedEventFilter

    'PoolConfigCacheUpdated(address)'(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter
    PoolConfigCacheUpdated(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter

    'PoolConfigChanged(address,address)'(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter
    PoolConfigChanged(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter
  }

  estimateGas: {
    calendar(overrides?: CallOverrides): Promise<BigNumber>

    closeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>

    currentEpochId(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    juniorTranche(overrides?: CallOverrides): Promise<BigNumber>

    minAmountToProcessPerEpoch(overrides?: CallOverrides): Promise<BigNumber>

    pool(overrides?: CallOverrides): Promise<BigNumber>

    poolConfig(overrides?: CallOverrides): Promise<BigNumber>

    poolSafe(overrides?: CallOverrides): Promise<BigNumber>

    seniorTranche(overrides?: CallOverrides): Promise<BigNumber>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    startNewEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    calendar(overrides?: CallOverrides): Promise<PopulatedTransaction>

    closeEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>

    currentEpochId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    juniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minAmountToProcessPerEpoch(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>

    seniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    startNewEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
