/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export type CreditRecordStruct = {
  unbilledPrincipal: PromiseOrValue<BigNumberish>
  nextDueDate: PromiseOrValue<BigNumberish>
  nextDue: PromiseOrValue<BigNumberish>
  yieldDue: PromiseOrValue<BigNumberish>
  totalPastDue: PromiseOrValue<BigNumberish>
  missedPeriods: PromiseOrValue<BigNumberish>
  remainingPeriods: PromiseOrValue<BigNumberish>
  state: PromiseOrValue<BigNumberish>
}

export type CreditRecordStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
] & {
  unbilledPrincipal: BigNumber
  nextDueDate: BigNumber
  nextDue: BigNumber
  yieldDue: BigNumber
  totalPastDue: BigNumber
  missedPeriods: number
  remainingPeriods: number
  state: number
}

export type DueDetailStruct = {
  lateFeeUpdatedDate: PromiseOrValue<BigNumberish>
  lateFee: PromiseOrValue<BigNumberish>
  principalPastDue: PromiseOrValue<BigNumberish>
  yieldPastDue: PromiseOrValue<BigNumberish>
  committed: PromiseOrValue<BigNumberish>
  accrued: PromiseOrValue<BigNumberish>
  paid: PromiseOrValue<BigNumberish>
}

export type DueDetailStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  lateFeeUpdatedDate: BigNumber
  lateFee: BigNumber
  principalPastDue: BigNumber
  yieldPastDue: BigNumber
  committed: BigNumber
  accrued: BigNumber
  paid: BigNumber
}

export interface CreditInterface extends utils.Interface {
  functions: {
    'creditManager()': FunctionFragment
    'dueManager()': FunctionFragment
    'firstLossCover()': FunctionFragment
    'getCreditRecord(bytes32)': FunctionFragment
    'getDueDetail(bytes32)': FunctionFragment
    'humaConfig()': FunctionFragment
    'initialize(address)': FunctionFragment
    'pool()': FunctionFragment
    'poolConfig()': FunctionFragment
    'poolSafe()': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'setCreditRecord(bytes32,(uint96,uint64,uint96,uint96,uint96,uint16,uint16,uint8))': FunctionFragment
    'setPoolConfig(address)': FunctionFragment
    'updateDueInfo(bytes32,(uint96,uint64,uint96,uint96,uint96,uint16,uint16,uint8),(uint64,uint96,uint96,uint96,uint96,uint96,uint96))': FunctionFragment
    'updatePoolConfigData()': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'creditManager'
      | 'dueManager'
      | 'firstLossCover'
      | 'getCreditRecord'
      | 'getDueDetail'
      | 'humaConfig'
      | 'initialize'
      | 'pool'
      | 'poolConfig'
      | 'poolSafe'
      | 'proxiableUUID'
      | 'setCreditRecord'
      | 'setPoolConfig'
      | 'updateDueInfo'
      | 'updatePoolConfigData'
      | 'upgradeTo'
      | 'upgradeToAndCall',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'creditManager',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'dueManager', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'firstLossCover',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getCreditRecord',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getDueDetail',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(functionFragment: 'humaConfig', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string
  encodeFunctionData(functionFragment: 'poolConfig', values?: undefined): string
  encodeFunctionData(functionFragment: 'poolSafe', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'proxiableUUID',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'setCreditRecord',
    values: [PromiseOrValue<BytesLike>, CreditRecordStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolConfig',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'updateDueInfo',
    values: [PromiseOrValue<BytesLike>, CreditRecordStruct, DueDetailStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'updatePoolConfigData',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string

  decodeFunctionResult(
    functionFragment: 'creditManager',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'dueManager', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'firstLossCover',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCreditRecord',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDueDetail',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'humaConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolSafe', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'proxiableUUID',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setCreditRecord',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolConfig',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateDueInfo',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatePoolConfigData',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike,
  ): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'BillRefreshed(bytes32,uint256,uint256,uint256)': EventFragment
    'CreditClosedAfterPayOff(bytes32,address)': EventFragment
    'DrawdownMade(address,uint256,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'PaymentMade(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)': EventFragment
    'PoolConfigCacheUpdated(address)': EventFragment
    'PoolConfigChanged(address,address)': EventFragment
    'PrincipalPaymentMade(address,address,uint256,uint256,uint256,uint256,uint256,uint256,address)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BillRefreshed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreditClosedAfterPayOff'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DrawdownMade'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PaymentMade'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigCacheUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PrincipalPaymentMade'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface BillRefreshedEventObject {
  creditHash: string
  newDueDate: BigNumber
  nextDue: BigNumber
  totalPastDue: BigNumber
}
export type BillRefreshedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  BillRefreshedEventObject
>

export type BillRefreshedEventFilter = TypedEventFilter<BillRefreshedEvent>

export interface CreditClosedAfterPayOffEventObject {
  creditHash: string
  by: string
}
export type CreditClosedAfterPayOffEvent = TypedEvent<
  [string, string],
  CreditClosedAfterPayOffEventObject
>

export type CreditClosedAfterPayOffEventFilter =
  TypedEventFilter<CreditClosedAfterPayOffEvent>

export interface DrawdownMadeEventObject {
  borrower: string
  borrowAmount: BigNumber
  netAmountToBorrower: BigNumber
}
export type DrawdownMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DrawdownMadeEventObject
>

export type DrawdownMadeEventFilter = TypedEventFilter<DrawdownMadeEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface PaymentMadeEventObject {
  borrower: string
  payer: string
  amount: BigNumber
  yieldDuePaid: BigNumber
  principalDuePaid: BigNumber
  unbilledPrincipalPaid: BigNumber
  yieldPastDuePaid: BigNumber
  lateFeePaid: BigNumber
  principalPastDuePaid: BigNumber
  by: string
}
export type PaymentMadeEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ],
  PaymentMadeEventObject
>

export type PaymentMadeEventFilter = TypedEventFilter<PaymentMadeEvent>

export interface PoolConfigCacheUpdatedEventObject {
  poolConfig: string
}
export type PoolConfigCacheUpdatedEvent = TypedEvent<
  [string],
  PoolConfigCacheUpdatedEventObject
>

export type PoolConfigCacheUpdatedEventFilter =
  TypedEventFilter<PoolConfigCacheUpdatedEvent>

export interface PoolConfigChangedEventObject {
  newPoolConfig: string
  oldPoolConfig: string
}
export type PoolConfigChangedEvent = TypedEvent<
  [string, string],
  PoolConfigChangedEventObject
>

export type PoolConfigChangedEventFilter =
  TypedEventFilter<PoolConfigChangedEvent>

export interface PrincipalPaymentMadeEventObject {
  borrower: string
  payer: string
  amount: BigNumber
  nextDueDate: BigNumber
  principalDue: BigNumber
  unbilledPrincipal: BigNumber
  principalDuePaid: BigNumber
  unbilledPrincipalPaid: BigNumber
  by: string
}
export type PrincipalPaymentMadeEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ],
  PrincipalPaymentMadeEventObject
>

export type PrincipalPaymentMadeEventFilter =
  TypedEventFilter<PrincipalPaymentMadeEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface Credit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: CreditInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    creditManager(overrides?: CallOverrides): Promise<[string]>

    dueManager(overrides?: CallOverrides): Promise<[string]>

    firstLossCover(overrides?: CallOverrides): Promise<[string]>

    getCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[CreditRecordStructOutput]>

    getDueDetail(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[DueDetailStructOutput]>

    humaConfig(overrides?: CallOverrides): Promise<[string]>

    initialize(
      poolConfig_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    pool(overrides?: CallOverrides): Promise<[string]>

    poolConfig(overrides?: CallOverrides): Promise<[string]>

    poolSafe(overrides?: CallOverrides): Promise<[string]>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    setCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolConfig(
      poolConfig_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateDueInfo(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      dd: DueDetailStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  creditManager(overrides?: CallOverrides): Promise<string>

  dueManager(overrides?: CallOverrides): Promise<string>

  firstLossCover(overrides?: CallOverrides): Promise<string>

  getCreditRecord(
    creditHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<CreditRecordStructOutput>

  getDueDetail(
    creditHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<DueDetailStructOutput>

  humaConfig(overrides?: CallOverrides): Promise<string>

  initialize(
    poolConfig_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  pool(overrides?: CallOverrides): Promise<string>

  poolConfig(overrides?: CallOverrides): Promise<string>

  poolSafe(overrides?: CallOverrides): Promise<string>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  setCreditRecord(
    creditHash: PromiseOrValue<BytesLike>,
    cr: CreditRecordStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolConfig(
    poolConfig_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateDueInfo(
    creditHash: PromiseOrValue<BytesLike>,
    cr: CreditRecordStruct,
    dd: DueDetailStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updatePoolConfigData(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    creditManager(overrides?: CallOverrides): Promise<string>

    dueManager(overrides?: CallOverrides): Promise<string>

    firstLossCover(overrides?: CallOverrides): Promise<string>

    getCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<CreditRecordStructOutput>

    getDueDetail(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<DueDetailStructOutput>

    humaConfig(overrides?: CallOverrides): Promise<string>

    initialize(
      poolConfig_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    pool(overrides?: CallOverrides): Promise<string>

    poolConfig(overrides?: CallOverrides): Promise<string>

    poolSafe(overrides?: CallOverrides): Promise<string>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    setCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolConfig(
      poolConfig_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateDueInfo(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      dd: DueDetailStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    updatePoolConfigData(overrides?: CallOverrides): Promise<void>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'BeaconUpgraded(address)'(
      beacon?: PromiseOrValue<string> | null,
    ): BeaconUpgradedEventFilter
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null,
    ): BeaconUpgradedEventFilter

    'BillRefreshed(bytes32,uint256,uint256,uint256)'(
      creditHash?: PromiseOrValue<BytesLike> | null,
      newDueDate?: null,
      nextDue?: null,
      totalPastDue?: null,
    ): BillRefreshedEventFilter
    BillRefreshed(
      creditHash?: PromiseOrValue<BytesLike> | null,
      newDueDate?: null,
      nextDue?: null,
      totalPastDue?: null,
    ): BillRefreshedEventFilter

    'CreditClosedAfterPayOff(bytes32,address)'(
      creditHash?: PromiseOrValue<BytesLike> | null,
      by?: null,
    ): CreditClosedAfterPayOffEventFilter
    CreditClosedAfterPayOff(
      creditHash?: PromiseOrValue<BytesLike> | null,
      by?: null,
    ): CreditClosedAfterPayOffEventFilter

    'DrawdownMade(address,uint256,uint256)'(
      borrower?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      netAmountToBorrower?: null,
    ): DrawdownMadeEventFilter
    DrawdownMade(
      borrower?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      netAmountToBorrower?: null,
    ): DrawdownMadeEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'PaymentMade(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)'(
      borrower?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      amount?: null,
      yieldDuePaid?: null,
      principalDuePaid?: null,
      unbilledPrincipalPaid?: null,
      yieldPastDuePaid?: null,
      lateFeePaid?: null,
      principalPastDuePaid?: null,
      by?: null,
    ): PaymentMadeEventFilter
    PaymentMade(
      borrower?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      amount?: null,
      yieldDuePaid?: null,
      principalDuePaid?: null,
      unbilledPrincipalPaid?: null,
      yieldPastDuePaid?: null,
      lateFeePaid?: null,
      principalPastDuePaid?: null,
      by?: null,
    ): PaymentMadeEventFilter

    'PoolConfigCacheUpdated(address)'(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter
    PoolConfigCacheUpdated(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter

    'PoolConfigChanged(address,address)'(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter
    PoolConfigChanged(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter

    'PrincipalPaymentMade(address,address,uint256,uint256,uint256,uint256,uint256,uint256,address)'(
      borrower?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      amount?: null,
      nextDueDate?: null,
      principalDue?: null,
      unbilledPrincipal?: null,
      principalDuePaid?: null,
      unbilledPrincipalPaid?: null,
      by?: null,
    ): PrincipalPaymentMadeEventFilter
    PrincipalPaymentMade(
      borrower?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      amount?: null,
      nextDueDate?: null,
      principalDue?: null,
      unbilledPrincipal?: null,
      principalDuePaid?: null,
      unbilledPrincipalPaid?: null,
      by?: null,
    ): PrincipalPaymentMadeEventFilter

    'Upgraded(address)'(
      implementation?: PromiseOrValue<string> | null,
    ): UpgradedEventFilter
    Upgraded(
      implementation?: PromiseOrValue<string> | null,
    ): UpgradedEventFilter
  }

  estimateGas: {
    creditManager(overrides?: CallOverrides): Promise<BigNumber>

    dueManager(overrides?: CallOverrides): Promise<BigNumber>

    firstLossCover(overrides?: CallOverrides): Promise<BigNumber>

    getCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDueDetail(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    humaConfig(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      poolConfig_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    pool(overrides?: CallOverrides): Promise<BigNumber>

    poolConfig(overrides?: CallOverrides): Promise<BigNumber>

    poolSafe(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    setCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolConfig(
      poolConfig_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateDueInfo(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      dd: DueDetailStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    creditManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    dueManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    firstLossCover(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getDueDetail(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    humaConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      poolConfig_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setCreditRecord(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolConfig(
      poolConfig_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateDueInfo(
      creditHash: PromiseOrValue<BytesLike>,
      cr: CreditRecordStruct,
      dd: DueDetailStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
