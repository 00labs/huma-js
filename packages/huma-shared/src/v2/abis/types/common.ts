/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
<<<<<<< HEAD
import type { Listener } from '@ethersproject/providers'
import type { Event, EventFilter } from 'ethers'

export interface TypedEvent<
  TArgsArray extends Array<any> = any,
  TArgsObject = any,
> extends Event {
  args: TArgsArray & TArgsObject
=======
import type { Listener } from "@ethersproject/providers";
import type { Event, EventFilter } from "ethers";

export interface TypedEvent<
  TArgsArray extends Array<any> = any,
  TArgsObject = any
> extends Event {
  args: TArgsArray & TArgsObject;
>>>>>>> ff9b4d4 (Add local network (#46))
}

export interface TypedEventFilter<_TEvent extends TypedEvent>
  extends EventFilter {}

export interface TypedListener<TEvent extends TypedEvent> {
<<<<<<< HEAD
  (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void
}

type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never
=======
  (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}

type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
>>>>>>> ff9b4d4 (Add local network (#46))

export interface OnEvent<TRes> {
  <TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
<<<<<<< HEAD
    listener: TypedListener<TEvent>,
  ): TRes
  (eventName: string, listener: Listener): TRes
}

export type MinEthersFactory<C, ARGS> = {
  deploy(...a: ARGS[]): Promise<C>
}
=======
    listener: TypedListener<TEvent>
  ): TRes;
  (eventName: string, listener: Listener): TRes;
}

export type MinEthersFactory<C, ARGS> = {
  deploy(...a: ARGS[]): Promise<C>;
};
>>>>>>> ff9b4d4 (Add local network (#46))

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
  infer C,
  any
>
  ? C
<<<<<<< HEAD
  : never

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
  ? Parameters<F['deploy']>
  : never

export type PromiseOrValue<T> = T | Promise<T>
=======
  : never;

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
  ? Parameters<F["deploy"]>
  : never;

export type PromiseOrValue<T> = T | Promise<T>;
>>>>>>> ff9b4d4 (Add local network (#46))
