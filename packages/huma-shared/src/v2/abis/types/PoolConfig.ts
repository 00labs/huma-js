/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export type AdminRnRStruct = {
  rewardRateInBpsForEA: PromiseOrValue<BigNumberish>
  rewardRateInBpsForPoolOwner: PromiseOrValue<BigNumberish>
  liquidityRateInBpsByEA: PromiseOrValue<BigNumberish>
  liquidityRateInBpsByPoolOwner: PromiseOrValue<BigNumberish>
  rewardRateInBpsForPoolCover: PromiseOrValue<BigNumberish>
  liquidityRateInBpsByPoolCover: PromiseOrValue<BigNumberish>
}

export type AdminRnRStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
] & {
  rewardRateInBpsForEA: number
  rewardRateInBpsForPoolOwner: number
  liquidityRateInBpsByEA: number
  liquidityRateInBpsByPoolOwner: number
  rewardRateInBpsForPoolCover: number
  liquidityRateInBpsByPoolCover: number
}

export type FirstLossCoverConfigStruct = {
  coverRateInBps: PromiseOrValue<BigNumberish>
  coverCap: PromiseOrValue<BigNumberish>
  liquidityCap: PromiseOrValue<BigNumberish>
  maxPercentOfPoolValueInBps: PromiseOrValue<BigNumberish>
  riskYieldMultiplier: PromiseOrValue<BigNumberish>
}

export type FirstLossCoverConfigStructOutput = [
  number,
  BigNumber,
  BigNumber,
  number,
  number,
] & {
  coverRateInBps: number
  coverCap: BigNumber
  liquidityCap: BigNumber
  maxPercentOfPoolValueInBps: number
  riskYieldMultiplier: number
}

export type LPConfigStruct = {
  permissioned: PromiseOrValue<boolean>
  liquidityCap: PromiseOrValue<BigNumberish>
  withdrawalLockoutInMonths: PromiseOrValue<BigNumberish>
  maxSeniorJuniorRatio: PromiseOrValue<BigNumberish>
  fixedSeniorYieldInBps: PromiseOrValue<BigNumberish>
  tranchesRiskAdjustmentInBps: PromiseOrValue<BigNumberish>
}

export type LPConfigStructOutput = [
  boolean,
  BigNumber,
  number,
  number,
  number,
  number,
] & {
  permissioned: boolean
  liquidityCap: BigNumber
  withdrawalLockoutInMonths: number
  maxSeniorJuniorRatio: number
  fixedSeniorYieldInBps: number
  tranchesRiskAdjustmentInBps: number
}

export type PoolSettingsStruct = {
  maxCreditLine: PromiseOrValue<BigNumberish>
  payPeriodInMonths: PromiseOrValue<BigNumberish>
  creditApprovalExpirationInDays: PromiseOrValue<BigNumberish>
  latePaymentGracePeriodInDays: PromiseOrValue<BigNumberish>
  defaultGracePeriodInMonths: PromiseOrValue<BigNumberish>
  receivableRequiredInBps: PromiseOrValue<BigNumberish>
  advanceRateInBps: PromiseOrValue<BigNumberish>
  singleBorrower: PromiseOrValue<boolean>
  singleCreditPerBorrower: PromiseOrValue<boolean>
}

export type PoolSettingsStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  boolean,
  boolean,
] & {
  maxCreditLine: BigNumber
  payPeriodInMonths: number
  creditApprovalExpirationInDays: number
  latePaymentGracePeriodInDays: number
  defaultGracePeriodInMonths: number
  receivableRequiredInBps: number
  advanceRateInBps: number
  singleBorrower: boolean
  singleCreditPerBorrower: boolean
}

export type FeeStructureStruct = {
  yieldInBps: PromiseOrValue<BigNumberish>
  minPrincipalRateInBps: PromiseOrValue<BigNumberish>
  lateFeeFlat: PromiseOrValue<BigNumberish>
  lateFeeBps: PromiseOrValue<BigNumberish>
  membershipFee: PromiseOrValue<BigNumberish>
}

export type FeeStructureStructOutput = [
  number,
  number,
  BigNumber,
  number,
  BigNumber,
] & {
  yieldInBps: number
  minPrincipalRateInBps: number
  lateFeeFlat: BigNumber
  lateFeeBps: number
  membershipFee: BigNumber
}

export type FrontLoadingFeesStructureStruct = {
  frontLoadingFeeFlat: PromiseOrValue<BigNumberish>
  frontLoadingFeeBps: PromiseOrValue<BigNumberish>
}

export type FrontLoadingFeesStructureStructOutput = [BigNumber, number] & {
  frontLoadingFeeFlat: BigNumber
  frontLoadingFeeBps: number
}

export interface PoolConfigInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'POOL_OPERATOR_ROLE()': FunctionFragment
    'calendar()': FunctionFragment
    'checkFirstLossCoverRequirementsForAdmin()': FunctionFragment
    'checkFirstLossCoverRequirementsForRedemption(address)': FunctionFragment
    'checkLiquidityRequirementForEA(uint256)': FunctionFragment
    'checkLiquidityRequirementForPoolOwner(uint256)': FunctionFragment
    'checkLiquidityRequirementForRedemption(address,address,uint256)': FunctionFragment
    'checkLiquidityRequirements()': FunctionFragment
    'credit()': FunctionFragment
    'creditDueManager()': FunctionFragment
    'epochManager()': FunctionFragment
    'evaluationAgent()': FunctionFragment
    'evaluationAgentId()': FunctionFragment
    'getAdminRnR()': FunctionFragment
    'getFees()': FunctionFragment
    'getFirstLossCover(uint256)': FunctionFragment
    'getFirstLossCoverConfig(address)': FunctionFragment
    'getFirstLossCovers()': FunctionFragment
    'getFrontLoadingFees()': FunctionFragment
    'getLPConfig()': FunctionFragment
    'getMinPrincipalRateInBps()': FunctionFragment
    'getPoolSettings()': FunctionFragment
    'getPoolSummary()': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getTrancheLiquidityCap(uint256)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'humaConfig()': FunctionFragment
    'initialize(string,address[])': FunctionFragment
    'isFirstLossCover(address)': FunctionFragment
    'juniorTranche()': FunctionFragment
    'onlyOwnerOrHumaMasterAdmin(address)': FunctionFragment
    'onlyPool(address)': FunctionFragment
    'onlyPoolOperator(address)': FunctionFragment
    'onlyPoolOwner(address)': FunctionFragment
    'onlyPoolOwnerOrEA(address)': FunctionFragment
    'onlyProtocolAndPoolOn()': FunctionFragment
    'pool()': FunctionFragment
    'poolFeeManager()': FunctionFragment
    'poolName()': FunctionFragment
    'poolOwnerTreasury()': FunctionFragment
    'poolSafe()': FunctionFragment
    'receivableAsset()': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'seniorTranche()': FunctionFragment
    'setAdvanceRateInBps(uint256)': FunctionFragment
    'setCalendar(address)': FunctionFragment
    'setCredit(address)': FunctionFragment
    'setCreditApprovalExpiration(uint256)': FunctionFragment
    'setEARewardsAndLiquidity(uint256,uint256)': FunctionFragment
    'setEpochManager(address)': FunctionFragment
    'setEvaluationAgent(uint256,address)': FunctionFragment
    'setFeeStructure((uint16,uint16,uint96,uint16,uint96))': FunctionFragment
    'setFirstLossCover(uint8,address,(uint16,uint96,uint96,uint16,uint16))': FunctionFragment
    'setFrontLoadingFees((uint96,uint16))': FunctionFragment
    'setHumaConfig(address)': FunctionFragment
    'setLPConfig((bool,uint96,uint8,uint8,uint16,uint16))': FunctionFragment
    'setLatePaymentGracePeriodInDays(uint256)': FunctionFragment
    'setMaxCreditLine(uint256)': FunctionFragment
    'setPool(address)': FunctionFragment
    'setPoolDefaultGracePeriod(uint256)': FunctionFragment
    'setPoolFeeManager(address)': FunctionFragment
    'setPoolLiquidityCap(uint256)': FunctionFragment
    'setPoolName(string)': FunctionFragment
    'setPoolOwnerRewardsAndLiquidity(uint256,uint256)': FunctionFragment
    'setPoolOwnerTreasury(address)': FunctionFragment
    'setPoolPayPeriod(uint256)': FunctionFragment
    'setPoolSafe(address)': FunctionFragment
    'setPoolUnderlyingToken(address)': FunctionFragment
    'setReceivableAsset(address)': FunctionFragment
    'setReceivableRequiredInBps(uint256)': FunctionFragment
    'setTranches(address,address)': FunctionFragment
    'setTranchesPolicy(address)': FunctionFragment
    'setWithdrawalLockoutPeriod(uint256)': FunctionFragment
    'setYield(uint256)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'tranchesPolicy()': FunctionFragment
    'underlyingToken()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'POOL_OPERATOR_ROLE'
      | 'calendar'
      | 'checkFirstLossCoverRequirementsForAdmin'
      | 'checkFirstLossCoverRequirementsForRedemption'
      | 'checkLiquidityRequirementForEA'
      | 'checkLiquidityRequirementForPoolOwner'
      | 'checkLiquidityRequirementForRedemption'
      | 'checkLiquidityRequirements'
      | 'credit'
      | 'creditDueManager'
      | 'epochManager'
      | 'evaluationAgent'
      | 'evaluationAgentId'
      | 'getAdminRnR'
      | 'getFees'
      | 'getFirstLossCover'
      | 'getFirstLossCoverConfig'
      | 'getFirstLossCovers'
      | 'getFrontLoadingFees'
      | 'getLPConfig'
      | 'getMinPrincipalRateInBps'
      | 'getPoolSettings'
      | 'getPoolSummary'
      | 'getRoleAdmin'
      | 'getTrancheLiquidityCap'
      | 'grantRole'
      | 'hasRole'
      | 'humaConfig'
      | 'initialize'
      | 'isFirstLossCover'
      | 'juniorTranche'
      | 'onlyOwnerOrHumaMasterAdmin'
      | 'onlyPool'
      | 'onlyPoolOperator'
      | 'onlyPoolOwner'
      | 'onlyPoolOwnerOrEA'
      | 'onlyProtocolAndPoolOn'
      | 'pool'
      | 'poolFeeManager'
      | 'poolName'
      | 'poolOwnerTreasury'
      | 'poolSafe'
      | 'receivableAsset'
      | 'renounceRole'
      | 'revokeRole'
      | 'seniorTranche'
      | 'setAdvanceRateInBps'
      | 'setCalendar'
      | 'setCredit'
      | 'setCreditApprovalExpiration'
      | 'setEARewardsAndLiquidity'
      | 'setEpochManager'
      | 'setEvaluationAgent'
      | 'setFeeStructure'
      | 'setFirstLossCover'
      | 'setFrontLoadingFees'
      | 'setHumaConfig'
      | 'setLPConfig'
      | 'setLatePaymentGracePeriodInDays'
      | 'setMaxCreditLine'
      | 'setPool'
      | 'setPoolDefaultGracePeriod'
      | 'setPoolFeeManager'
      | 'setPoolLiquidityCap'
      | 'setPoolName'
      | 'setPoolOwnerRewardsAndLiquidity'
      | 'setPoolOwnerTreasury'
      | 'setPoolPayPeriod'
      | 'setPoolSafe'
      | 'setPoolUnderlyingToken'
      | 'setReceivableAsset'
      | 'setReceivableRequiredInBps'
      | 'setTranches'
      | 'setTranchesPolicy'
      | 'setWithdrawalLockoutPeriod'
      | 'setYield'
      | 'supportsInterface'
      | 'tranchesPolicy'
      | 'underlyingToken',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'POOL_OPERATOR_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'calendar', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'checkFirstLossCoverRequirementsForAdmin',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'checkFirstLossCoverRequirementsForRedemption',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'checkLiquidityRequirementForEA',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'checkLiquidityRequirementForPoolOwner',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'checkLiquidityRequirementForRedemption',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'checkLiquidityRequirements',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'credit', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'creditDueManager',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'epochManager',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'evaluationAgent',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'evaluationAgentId',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getAdminRnR',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'getFees', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getFirstLossCover',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getFirstLossCoverConfig',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'getFirstLossCovers',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getFrontLoadingFees',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getLPConfig',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getMinPrincipalRateInBps',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getPoolSettings',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getPoolSummary',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getTrancheLiquidityCap',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'humaConfig', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string
  encodeFunctionData(
    functionFragment: 'isFirstLossCover',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'juniorTranche',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'onlyOwnerOrHumaMasterAdmin',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'onlyPool',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'onlyPoolOperator',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'onlyPoolOwner',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'onlyPoolOwnerOrEA',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'onlyProtocolAndPoolOn',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'poolFeeManager',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'poolName', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'poolOwnerTreasury',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'poolSafe', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'receivableAsset',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'seniorTranche',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'setAdvanceRateInBps',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setCalendar',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setCredit',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setCreditApprovalExpiration',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setEARewardsAndLiquidity',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setEpochManager',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setEvaluationAgent',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeStructure',
    values: [FeeStructureStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'setFirstLossCover',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      FirstLossCoverConfigStruct,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'setFrontLoadingFees',
    values: [FrontLoadingFeesStructureStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'setHumaConfig',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setLPConfig',
    values: [LPConfigStruct],
  ): string
  encodeFunctionData(
    functionFragment: 'setLatePaymentGracePeriodInDays',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxCreditLine',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPool',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolDefaultGracePeriod',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolFeeManager',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolLiquidityCap',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolName',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolOwnerRewardsAndLiquidity',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolOwnerTreasury',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolPayPeriod',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolSafe',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolUnderlyingToken',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setReceivableAsset',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setReceivableRequiredInBps',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setTranches',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setTranchesPolicy',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setWithdrawalLockoutPeriod',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'setYield',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'tranchesPolicy',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'underlyingToken',
    values?: undefined,
  ): string

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'POOL_OPERATOR_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'calendar', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'checkFirstLossCoverRequirementsForAdmin',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'checkFirstLossCoverRequirementsForRedemption',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'checkLiquidityRequirementForEA',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'checkLiquidityRequirementForPoolOwner',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'checkLiquidityRequirementForRedemption',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'checkLiquidityRequirements',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'credit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'creditDueManager',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'epochManager',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'evaluationAgent',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'evaluationAgentId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getAdminRnR', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getFees', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getFirstLossCover',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFirstLossCoverConfig',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFirstLossCovers',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFrontLoadingFees',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getLPConfig', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getMinPrincipalRateInBps',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPoolSettings',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPoolSummary',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTrancheLiquidityCap',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'humaConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isFirstLossCover',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'juniorTranche',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onlyOwnerOrHumaMasterAdmin',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'onlyPool', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'onlyPoolOperator',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onlyPoolOwner',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onlyPoolOwnerOrEA',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onlyProtocolAndPoolOn',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'poolFeeManager',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'poolName', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'poolOwnerTreasury',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'poolSafe', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'receivableAsset',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'seniorTranche',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setAdvanceRateInBps',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setCalendar', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setCredit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setCreditApprovalExpiration',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setEARewardsAndLiquidity',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setEpochManager',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setEvaluationAgent',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeStructure',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFirstLossCover',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFrontLoadingFees',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setHumaConfig',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setLPConfig', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setLatePaymentGracePeriodInDays',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMaxCreditLine',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setPool', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setPoolDefaultGracePeriod',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolFeeManager',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolLiquidityCap',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setPoolName', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setPoolOwnerRewardsAndLiquidity',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolOwnerTreasury',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolPayPeriod',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setPoolSafe', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setPoolUnderlyingToken',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setReceivableAsset',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setReceivableRequiredInBps',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setTranches', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setTranchesPolicy',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setWithdrawalLockoutPeriod',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'setYield', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'tranchesPolicy',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'underlyingToken',
    data: BytesLike,
  ): Result

  events: {
    'AdvanceRateInBpsChanged(uint256,address)': EventFragment
    'CalendarChanged(address,address)': EventFragment
    'CreditApprovalExpirationChanged(uint256,address)': EventFragment
    'CreditChanged(address,address)': EventFragment
    'EARewardsAndLiquidityChanged(uint256,uint256,address)': EventFragment
    'EpochManagerChanged(address,address)': EventFragment
    'EvaluationAgentChanged(address,address,uint256,address)': EventFragment
    'EvaluationAgentRewardsWithdrawn(address,uint256,address)': EventFragment
    'FeeStructureChanged(uint16,uint16,uint96,uint16,uint96,address)': EventFragment
    'FirstLossCoverChanged(uint8,address,uint16,uint96,uint96,uint16,uint16,address)': EventFragment
    'FrontLoadingFeesChanged(uint96,uint16,address)': EventFragment
    'HumaConfigChanged(address,address)': EventFragment
    'Initialized(uint8)': EventFragment
    'LPConfigChanged(bool,uint96,uint8,uint8,uint16,uint16,address)': EventFragment
    'LatePaymentGracePeriodChanged(uint256,address)': EventFragment
    'MaxCreditLineChanged(uint256,address)': EventFragment
    'PoolChanged(address,address)': EventFragment
    'PoolDefaultGracePeriodChanged(uint256,address)': EventFragment
    'PoolFeeManagerChanged(address,address)': EventFragment
    'PoolFlexCallChanged(bool,uint256,address)': EventFragment
    'PoolLiquidityCapChanged(uint256,address)': EventFragment
    'PoolNameChanged(string,address)': EventFragment
    'PoolOwnerRewardsAndLiquidityChanged(uint256,uint256,address)': EventFragment
    'PoolOwnerTreasuryChanged(address,address)': EventFragment
    'PoolPayPeriodChanged(uint256,address)': EventFragment
    'PoolRewardsWithdrawn(address,uint256)': EventFragment
    'PoolSafeChanged(address,address)': EventFragment
    'PoolUnderlyingTokenChanged(address,address)': EventFragment
    'ProtocolRewardsWithdrawn(address,uint256,address)': EventFragment
    'ReceivableAssetChanged(address,address)': EventFragment
    'ReceivableRequiredInBpsChanged(uint256,address)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'TranchesChanged(address,address,address)': EventFragment
    'TranchesPolicyChanged(address,address)': EventFragment
    'WithdrawalLockoutPeriodChanged(uint256,address)': EventFragment
    'YieldChanged(uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdvanceRateInBpsChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CalendarChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'CreditApprovalExpirationChanged',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreditChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'EARewardsAndLiquidityChanged',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EpochManagerChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EvaluationAgentChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'EvaluationAgentRewardsWithdrawn',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeStructureChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FirstLossCoverChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FrontLoadingFeesChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'HumaConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LPConfigChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'LatePaymentGracePeriodChanged',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MaxCreditLineChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'PoolDefaultGracePeriodChanged',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolFeeManagerChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolFlexCallChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolLiquidityCapChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolNameChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'PoolOwnerRewardsAndLiquidityChanged',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolOwnerTreasuryChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolPayPeriodChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolRewardsWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolSafeChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolUnderlyingTokenChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProtocolRewardsWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReceivableAssetChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'ReceivableRequiredInBpsChanged',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TranchesChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TranchesPolicyChanged'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'WithdrawalLockoutPeriodChanged',
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'YieldChanged'): EventFragment
}

export interface AdvanceRateInBpsChangedEventObject {
  advanceRateInBps: BigNumber
  by: string
}
export type AdvanceRateInBpsChangedEvent = TypedEvent<
  [BigNumber, string],
  AdvanceRateInBpsChangedEventObject
>

export type AdvanceRateInBpsChangedEventFilter =
  TypedEventFilter<AdvanceRateInBpsChangedEvent>

export interface CalendarChangedEventObject {
  calendar: string
  by: string
}
export type CalendarChangedEvent = TypedEvent<
  [string, string],
  CalendarChangedEventObject
>

export type CalendarChangedEventFilter = TypedEventFilter<CalendarChangedEvent>

export interface CreditApprovalExpirationChangedEventObject {
  durationInDays: BigNumber
  by: string
}
export type CreditApprovalExpirationChangedEvent = TypedEvent<
  [BigNumber, string],
  CreditApprovalExpirationChangedEventObject
>

export type CreditApprovalExpirationChangedEventFilter =
  TypedEventFilter<CreditApprovalExpirationChangedEvent>

export interface CreditChangedEventObject {
  credit: string
  by: string
}
export type CreditChangedEvent = TypedEvent<
  [string, string],
  CreditChangedEventObject
>

export type CreditChangedEventFilter = TypedEventFilter<CreditChangedEvent>

export interface EARewardsAndLiquidityChangedEventObject {
  rewardRate: BigNumber
  liquidityRate: BigNumber
  by: string
}
export type EARewardsAndLiquidityChangedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  EARewardsAndLiquidityChangedEventObject
>

export type EARewardsAndLiquidityChangedEventFilter =
  TypedEventFilter<EARewardsAndLiquidityChangedEvent>

export interface EpochManagerChangedEventObject {
  epochManager: string
  by: string
}
export type EpochManagerChangedEvent = TypedEvent<
  [string, string],
  EpochManagerChangedEventObject
>

export type EpochManagerChangedEventFilter =
  TypedEventFilter<EpochManagerChangedEvent>

export interface EvaluationAgentChangedEventObject {
  oldEA: string
  newEA: string
  newEAId: BigNumber
  by: string
}
export type EvaluationAgentChangedEvent = TypedEvent<
  [string, string, BigNumber, string],
  EvaluationAgentChangedEventObject
>

export type EvaluationAgentChangedEventFilter =
  TypedEventFilter<EvaluationAgentChangedEvent>

export interface EvaluationAgentRewardsWithdrawnEventObject {
  receiver: string
  amount: BigNumber
  by: string
}
export type EvaluationAgentRewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  EvaluationAgentRewardsWithdrawnEventObject
>

export type EvaluationAgentRewardsWithdrawnEventFilter =
  TypedEventFilter<EvaluationAgentRewardsWithdrawnEvent>

export interface FeeStructureChangedEventObject {
  yieldInBps: number
  minPrincipalRateInBps: number
  lateFeeFlat: BigNumber
  lateFeeBps: number
  membershipFee: BigNumber
  by: string
}
export type FeeStructureChangedEvent = TypedEvent<
  [number, number, BigNumber, number, BigNumber, string],
  FeeStructureChangedEventObject
>

export type FeeStructureChangedEventFilter =
  TypedEventFilter<FeeStructureChangedEvent>

export interface FirstLossCoverChangedEventObject {
  index: number
  firstLossCover: string
  coverRateInBps: number
  coverCap: BigNumber
  liquidityCap: BigNumber
  maxPercentOfPoolValueInBps: number
  riskYieldMultiplier: number
  by: string
}
export type FirstLossCoverChangedEvent = TypedEvent<
  [number, string, number, BigNumber, BigNumber, number, number, string],
  FirstLossCoverChangedEventObject
>

export type FirstLossCoverChangedEventFilter =
  TypedEventFilter<FirstLossCoverChangedEvent>

export interface FrontLoadingFeesChangedEventObject {
  frontLoadingFeeFlat: BigNumber
  frontLoadingFeeBps: number
  by: string
}
export type FrontLoadingFeesChangedEvent = TypedEvent<
  [BigNumber, number, string],
  FrontLoadingFeesChangedEventObject
>

export type FrontLoadingFeesChangedEventFilter =
  TypedEventFilter<FrontLoadingFeesChangedEvent>

export interface HumaConfigChangedEventObject {
  humaConfig: string
  by: string
}
export type HumaConfigChangedEvent = TypedEvent<
  [string, string],
  HumaConfigChangedEventObject
>

export type HumaConfigChangedEventFilter =
  TypedEventFilter<HumaConfigChangedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface LPConfigChangedEventObject {
  permissioned: boolean
  liquidityCap: BigNumber
  withdrawalLockoutInMonths: number
  maxSeniorJuniorRatio: number
  fixedSeniorYieldInBps: number
  tranchesRiskAdjustmentInBps: number
  by: string
}
export type LPConfigChangedEvent = TypedEvent<
  [boolean, BigNumber, number, number, number, number, string],
  LPConfigChangedEventObject
>

export type LPConfigChangedEventFilter = TypedEventFilter<LPConfigChangedEvent>

export interface LatePaymentGracePeriodChangedEventObject {
  gracePeriodInDays: BigNumber
  by: string
}
export type LatePaymentGracePeriodChangedEvent = TypedEvent<
  [BigNumber, string],
  LatePaymentGracePeriodChangedEventObject
>

export type LatePaymentGracePeriodChangedEventFilter =
  TypedEventFilter<LatePaymentGracePeriodChangedEvent>

export interface MaxCreditLineChangedEventObject {
  maxCreditLine: BigNumber
  by: string
}
export type MaxCreditLineChangedEvent = TypedEvent<
  [BigNumber, string],
  MaxCreditLineChangedEventObject
>

export type MaxCreditLineChangedEventFilter =
  TypedEventFilter<MaxCreditLineChangedEvent>

export interface PoolChangedEventObject {
  pool: string
  by: string
}
export type PoolChangedEvent = TypedEvent<
  [string, string],
  PoolChangedEventObject
>

export type PoolChangedEventFilter = TypedEventFilter<PoolChangedEvent>

export interface PoolDefaultGracePeriodChangedEventObject {
  gracePeriodInMonths: BigNumber
  by: string
}
export type PoolDefaultGracePeriodChangedEvent = TypedEvent<
  [BigNumber, string],
  PoolDefaultGracePeriodChangedEventObject
>

export type PoolDefaultGracePeriodChangedEventFilter =
  TypedEventFilter<PoolDefaultGracePeriodChangedEvent>

export interface PoolFeeManagerChangedEventObject {
  poolFeeManager: string
  by: string
}
export type PoolFeeManagerChangedEvent = TypedEvent<
  [string, string],
  PoolFeeManagerChangedEventObject
>

export type PoolFeeManagerChangedEventFilter =
  TypedEventFilter<PoolFeeManagerChangedEvent>

export interface PoolFlexCallChangedEventObject {
  enabled: boolean
  windowInEpoch: BigNumber
  by: string
}
export type PoolFlexCallChangedEvent = TypedEvent<
  [boolean, BigNumber, string],
  PoolFlexCallChangedEventObject
>

export type PoolFlexCallChangedEventFilter =
  TypedEventFilter<PoolFlexCallChangedEvent>

export interface PoolLiquidityCapChangedEventObject {
  liquidityCap: BigNumber
  by: string
}
export type PoolLiquidityCapChangedEvent = TypedEvent<
  [BigNumber, string],
  PoolLiquidityCapChangedEventObject
>

export type PoolLiquidityCapChangedEventFilter =
  TypedEventFilter<PoolLiquidityCapChangedEvent>

export interface PoolNameChangedEventObject {
  name: string
  by: string
}
export type PoolNameChangedEvent = TypedEvent<
  [string, string],
  PoolNameChangedEventObject
>

export type PoolNameChangedEventFilter = TypedEventFilter<PoolNameChangedEvent>

export interface PoolOwnerRewardsAndLiquidityChangedEventObject {
  rewardRate: BigNumber
  liquidityRate: BigNumber
  by: string
}
export type PoolOwnerRewardsAndLiquidityChangedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  PoolOwnerRewardsAndLiquidityChangedEventObject
>

export type PoolOwnerRewardsAndLiquidityChangedEventFilter =
  TypedEventFilter<PoolOwnerRewardsAndLiquidityChangedEvent>

export interface PoolOwnerTreasuryChangedEventObject {
  treasury: string
  by: string
}
export type PoolOwnerTreasuryChangedEvent = TypedEvent<
  [string, string],
  PoolOwnerTreasuryChangedEventObject
>

export type PoolOwnerTreasuryChangedEventFilter =
  TypedEventFilter<PoolOwnerTreasuryChangedEvent>

export interface PoolPayPeriodChangedEventObject {
  number: BigNumber
  by: string
}
export type PoolPayPeriodChangedEvent = TypedEvent<
  [BigNumber, string],
  PoolPayPeriodChangedEventObject
>

export type PoolPayPeriodChangedEventFilter =
  TypedEventFilter<PoolPayPeriodChangedEvent>

export interface PoolRewardsWithdrawnEventObject {
  receiver: string
  amount: BigNumber
}
export type PoolRewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  PoolRewardsWithdrawnEventObject
>

export type PoolRewardsWithdrawnEventFilter =
  TypedEventFilter<PoolRewardsWithdrawnEvent>

export interface PoolSafeChangedEventObject {
  poolSafe: string
  by: string
}
export type PoolSafeChangedEvent = TypedEvent<
  [string, string],
  PoolSafeChangedEventObject
>

export type PoolSafeChangedEventFilter = TypedEventFilter<PoolSafeChangedEvent>

export interface PoolUnderlyingTokenChangedEventObject {
  underlyingToken: string
  by: string
}
export type PoolUnderlyingTokenChangedEvent = TypedEvent<
  [string, string],
  PoolUnderlyingTokenChangedEventObject
>

export type PoolUnderlyingTokenChangedEventFilter =
  TypedEventFilter<PoolUnderlyingTokenChangedEvent>

export interface ProtocolRewardsWithdrawnEventObject {
  receiver: string
  amount: BigNumber
  by: string
}
export type ProtocolRewardsWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  ProtocolRewardsWithdrawnEventObject
>

export type ProtocolRewardsWithdrawnEventFilter =
  TypedEventFilter<ProtocolRewardsWithdrawnEvent>

export interface ReceivableAssetChangedEventObject {
  receivableAsset: string
  by: string
}
export type ReceivableAssetChangedEvent = TypedEvent<
  [string, string],
  ReceivableAssetChangedEventObject
>

export type ReceivableAssetChangedEventFilter =
  TypedEventFilter<ReceivableAssetChangedEvent>

export interface ReceivableRequiredInBpsChangedEventObject {
  receivableRequiredInBps: BigNumber
  by: string
}
export type ReceivableRequiredInBpsChangedEvent = TypedEvent<
  [BigNumber, string],
  ReceivableRequiredInBpsChangedEventObject
>

export type ReceivableRequiredInBpsChangedEventFilter =
  TypedEventFilter<ReceivableRequiredInBpsChangedEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface TranchesChangedEventObject {
  seniorTranche: string
  juniorTranche: string
  by: string
}
export type TranchesChangedEvent = TypedEvent<
  [string, string, string],
  TranchesChangedEventObject
>

export type TranchesChangedEventFilter = TypedEventFilter<TranchesChangedEvent>

export interface TranchesPolicyChangedEventObject {
  tranchesPolicy: string
  by: string
}
export type TranchesPolicyChangedEvent = TypedEvent<
  [string, string],
  TranchesPolicyChangedEventObject
>

export type TranchesPolicyChangedEventFilter =
  TypedEventFilter<TranchesPolicyChangedEvent>

export interface WithdrawalLockoutPeriodChangedEventObject {
  lockoutPeriodInMonths: BigNumber
  by: string
}
export type WithdrawalLockoutPeriodChangedEvent = TypedEvent<
  [BigNumber, string],
  WithdrawalLockoutPeriodChangedEventObject
>

export type WithdrawalLockoutPeriodChangedEventFilter =
  TypedEventFilter<WithdrawalLockoutPeriodChangedEvent>

export interface YieldChangedEventObject {
  aprInBps: BigNumber
  by: string
}
export type YieldChangedEvent = TypedEvent<
  [BigNumber, string],
  YieldChangedEventObject
>

export type YieldChangedEventFilter = TypedEventFilter<YieldChangedEvent>

export interface PoolConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PoolConfigInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    POOL_OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>

    calendar(overrides?: CallOverrides): Promise<[string]>

    checkFirstLossCoverRequirementsForAdmin(
      overrides?: CallOverrides,
    ): Promise<[void]>

    checkFirstLossCoverRequirementsForRedemption(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    checkLiquidityRequirementForRedemption(
      lender: PromiseOrValue<string>,
      trancheVault: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    checkLiquidityRequirements(overrides?: CallOverrides): Promise<[void]>

    credit(overrides?: CallOverrides): Promise<[string]>

    creditDueManager(overrides?: CallOverrides): Promise<[string]>

    epochManager(overrides?: CallOverrides): Promise<[string]>

    evaluationAgent(overrides?: CallOverrides): Promise<[string]>

    evaluationAgentId(overrides?: CallOverrides): Promise<[BigNumber]>

    getAdminRnR(overrides?: CallOverrides): Promise<[AdminRnRStructOutput]>

    getFees(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _lateFeeFlat: BigNumber
        _lateFeeBps: BigNumber
        _membershipFee: BigNumber
      }
    >

    getFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getFirstLossCoverConfig(
      firstLossCover: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[FirstLossCoverConfigStructOutput]>

    getFirstLossCovers(overrides?: CallOverrides): Promise<[string[]]>

    getFrontLoadingFees(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>

    getLPConfig(overrides?: CallOverrides): Promise<[LPConfigStructOutput]>

    getMinPrincipalRateInBps(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _minPrincipalRate: BigNumber }>

    getPoolSettings(
      overrides?: CallOverrides,
    ): Promise<[PoolSettingsStructOutput]>

    getPoolSummary(overrides?: CallOverrides): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        string,
      ] & {
        token: string
        yieldInBps: BigNumber
        payPeriod: BigNumber
        maxCreditAmount: BigNumber
        liquidityCap: BigNumber
        name: string
        symbol: string
        decimals: number
        eaId: BigNumber
        eaNFTAddress: string
      }
    >

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getTrancheLiquidityCap(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { cap: BigNumber }>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    humaConfig(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _poolName: PromiseOrValue<string>,
      _contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    isFirstLossCover(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isCover: boolean }>

    juniorTranche(overrides?: CallOverrides): Promise<[string]>

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    onlyPool(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    onlyPoolOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    onlyPoolOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    onlyPoolOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    onlyProtocolAndPoolOn(overrides?: CallOverrides): Promise<[void]>

    pool(overrides?: CallOverrides): Promise<[string]>

    poolFeeManager(overrides?: CallOverrides): Promise<[string]>

    poolName(overrides?: CallOverrides): Promise<[string]>

    poolOwnerTreasury(overrides?: CallOverrides): Promise<[string]>

    poolSafe(overrides?: CallOverrides): Promise<[string]>

    receivableAsset(overrides?: CallOverrides): Promise<[string]>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    seniorTranche(overrides?: CallOverrides): Promise<[string]>

    setAdvanceRateInBps(
      advanceRateInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setCalendar(
      _calendar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setCredit(
      _credit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setEARewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setEpochManager(
      _epochManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setFeeStructure(
      feeStructure: FeeStructureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      firstLossCover: PromiseOrValue<string>,
      config: FirstLossCoverConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setFrontLoadingFees(
      frontFees: FrontLoadingFeesStructureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setLPConfig(
      lpConfig: LPConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setLatePaymentGracePeriodInDays(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolDefaultGracePeriod(
      gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolFeeManager(
      _poolFeeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolOwnerRewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolOwnerTreasury(
      _poolOwnerTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolPayPeriod(
      number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolSafe(
      _poolSafe: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolUnderlyingToken(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setReceivableAsset(
      _receivableAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setReceivableRequiredInBps(
      receivableRequiredInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setTranches(
      _seniorTranche: PromiseOrValue<string>,
      _juniorTranche: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setTranchesPolicy(
      _tranchesPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setWithdrawalLockoutPeriod(
      lockoutPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setYield(
      _yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    tranchesPolicy(overrides?: CallOverrides): Promise<[string]>

    underlyingToken(overrides?: CallOverrides): Promise<[string]>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  POOL_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

  calendar(overrides?: CallOverrides): Promise<string>

  checkFirstLossCoverRequirementsForAdmin(
    overrides?: CallOverrides,
  ): Promise<void>

  checkFirstLossCoverRequirementsForRedemption(
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<void>

  checkLiquidityRequirementForEA(
    balance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<void>

  checkLiquidityRequirementForPoolOwner(
    balance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<void>

  checkLiquidityRequirementForRedemption(
    lender: PromiseOrValue<string>,
    trancheVault: PromiseOrValue<string>,
    newBalance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<void>

  checkLiquidityRequirements(overrides?: CallOverrides): Promise<void>

  credit(overrides?: CallOverrides): Promise<string>

  creditDueManager(overrides?: CallOverrides): Promise<string>

  epochManager(overrides?: CallOverrides): Promise<string>

  evaluationAgent(overrides?: CallOverrides): Promise<string>

  evaluationAgentId(overrides?: CallOverrides): Promise<BigNumber>

  getAdminRnR(overrides?: CallOverrides): Promise<AdminRnRStructOutput>

  getFees(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _lateFeeFlat: BigNumber
      _lateFeeBps: BigNumber
      _membershipFee: BigNumber
    }
  >

  getFirstLossCover(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  getFirstLossCoverConfig(
    firstLossCover: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<FirstLossCoverConfigStructOutput>

  getFirstLossCovers(overrides?: CallOverrides): Promise<string[]>

  getFrontLoadingFees(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>

  getLPConfig(overrides?: CallOverrides): Promise<LPConfigStructOutput>

  getMinPrincipalRateInBps(overrides?: CallOverrides): Promise<BigNumber>

  getPoolSettings(overrides?: CallOverrides): Promise<PoolSettingsStructOutput>

  getPoolSummary(overrides?: CallOverrides): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      BigNumber,
      string,
    ] & {
      token: string
      yieldInBps: BigNumber
      payPeriod: BigNumber
      maxCreditAmount: BigNumber
      liquidityCap: BigNumber
      name: string
      symbol: string
      decimals: number
      eaId: BigNumber
      eaNFTAddress: string
    }
  >

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  getTrancheLiquidityCap(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  humaConfig(overrides?: CallOverrides): Promise<string>

  initialize(
    _poolName: PromiseOrValue<string>,
    _contracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  isFirstLossCover(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  juniorTranche(overrides?: CallOverrides): Promise<string>

  onlyOwnerOrHumaMasterAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<void>

  onlyPool(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<void>

  onlyPoolOperator(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<void>

  onlyPoolOwner(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<void>

  onlyPoolOwnerOrEA(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>

  onlyProtocolAndPoolOn(overrides?: CallOverrides): Promise<void>

  pool(overrides?: CallOverrides): Promise<string>

  poolFeeManager(overrides?: CallOverrides): Promise<string>

  poolName(overrides?: CallOverrides): Promise<string>

  poolOwnerTreasury(overrides?: CallOverrides): Promise<string>

  poolSafe(overrides?: CallOverrides): Promise<string>

  receivableAsset(overrides?: CallOverrides): Promise<string>

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  seniorTranche(overrides?: CallOverrides): Promise<string>

  setAdvanceRateInBps(
    advanceRateInBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setCalendar(
    _calendar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setCredit(
    _credit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setCreditApprovalExpiration(
    durationInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setEARewardsAndLiquidity(
    rewardRate: PromiseOrValue<BigNumberish>,
    liquidityRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setEpochManager(
    _epochManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setEvaluationAgent(
    eaId: PromiseOrValue<BigNumberish>,
    agent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setFeeStructure(
    feeStructure: FeeStructureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setFirstLossCover(
    index: PromiseOrValue<BigNumberish>,
    firstLossCover: PromiseOrValue<string>,
    config: FirstLossCoverConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setFrontLoadingFees(
    frontFees: FrontLoadingFeesStructureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setHumaConfig(
    _humaConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setLPConfig(
    lpConfig: LPConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setLatePaymentGracePeriodInDays(
    gracePeriodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setMaxCreditLine(
    creditLine: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPool(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolDefaultGracePeriod(
    gracePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolFeeManager(
    _poolFeeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolLiquidityCap(
    liquidityCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolName(
    newName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolOwnerRewardsAndLiquidity(
    rewardRate: PromiseOrValue<BigNumberish>,
    liquidityRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolOwnerTreasury(
    _poolOwnerTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolPayPeriod(
    number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolSafe(
    _poolSafe: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolUnderlyingToken(
    _underlyingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setReceivableAsset(
    _receivableAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setReceivableRequiredInBps(
    receivableRequiredInBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setTranches(
    _seniorTranche: PromiseOrValue<string>,
    _juniorTranche: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setTranchesPolicy(
    _tranchesPolicy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setWithdrawalLockoutPeriod(
    lockoutPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setYield(
    _yieldInBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  tranchesPolicy(overrides?: CallOverrides): Promise<string>

  underlyingToken(overrides?: CallOverrides): Promise<string>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    POOL_OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>

    calendar(overrides?: CallOverrides): Promise<string>

    checkFirstLossCoverRequirementsForAdmin(
      overrides?: CallOverrides,
    ): Promise<void>

    checkFirstLossCoverRequirementsForRedemption(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    checkLiquidityRequirementForRedemption(
      lender: PromiseOrValue<string>,
      trancheVault: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    checkLiquidityRequirements(overrides?: CallOverrides): Promise<void>

    credit(overrides?: CallOverrides): Promise<string>

    creditDueManager(overrides?: CallOverrides): Promise<string>

    epochManager(overrides?: CallOverrides): Promise<string>

    evaluationAgent(overrides?: CallOverrides): Promise<string>

    evaluationAgentId(overrides?: CallOverrides): Promise<BigNumber>

    getAdminRnR(overrides?: CallOverrides): Promise<AdminRnRStructOutput>

    getFees(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _lateFeeFlat: BigNumber
        _lateFeeBps: BigNumber
        _membershipFee: BigNumber
      }
    >

    getFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    getFirstLossCoverConfig(
      firstLossCover: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<FirstLossCoverConfigStructOutput>

    getFirstLossCovers(overrides?: CallOverrides): Promise<string[]>

    getFrontLoadingFees(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>

    getLPConfig(overrides?: CallOverrides): Promise<LPConfigStructOutput>

    getMinPrincipalRateInBps(overrides?: CallOverrides): Promise<BigNumber>

    getPoolSettings(
      overrides?: CallOverrides,
    ): Promise<PoolSettingsStructOutput>

    getPoolSummary(overrides?: CallOverrides): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber,
        string,
      ] & {
        token: string
        yieldInBps: BigNumber
        payPeriod: BigNumber
        maxCreditAmount: BigNumber
        liquidityCap: BigNumber
        name: string
        symbol: string
        decimals: number
        eaId: BigNumber
        eaNFTAddress: string
      }
    >

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    getTrancheLiquidityCap(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    humaConfig(overrides?: CallOverrides): Promise<string>

    initialize(
      _poolName: PromiseOrValue<string>,
      _contracts: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>

    isFirstLossCover(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    juniorTranche(overrides?: CallOverrides): Promise<string>

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    onlyPool(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    onlyPoolOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    onlyPoolOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    onlyPoolOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>

    onlyProtocolAndPoolOn(overrides?: CallOverrides): Promise<void>

    pool(overrides?: CallOverrides): Promise<string>

    poolFeeManager(overrides?: CallOverrides): Promise<string>

    poolName(overrides?: CallOverrides): Promise<string>

    poolOwnerTreasury(overrides?: CallOverrides): Promise<string>

    poolSafe(overrides?: CallOverrides): Promise<string>

    receivableAsset(overrides?: CallOverrides): Promise<string>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    seniorTranche(overrides?: CallOverrides): Promise<string>

    setAdvanceRateInBps(
      advanceRateInBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setCalendar(
      _calendar: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setCredit(
      _credit: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setEARewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setEpochManager(
      _epochManager: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setFeeStructure(
      feeStructure: FeeStructureStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    setFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      firstLossCover: PromiseOrValue<string>,
      config: FirstLossCoverConfigStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    setFrontLoadingFees(
      frontFees: FrontLoadingFeesStructureStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setLPConfig(
      lpConfig: LPConfigStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    setLatePaymentGracePeriodInDays(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolDefaultGracePeriod(
      gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolFeeManager(
      _poolFeeManager: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolOwnerRewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolOwnerTreasury(
      _poolOwnerTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolPayPeriod(
      number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolSafe(
      _poolSafe: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolUnderlyingToken(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setReceivableAsset(
      _receivableAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setReceivableRequiredInBps(
      receivableRequiredInBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setTranches(
      _seniorTranche: PromiseOrValue<string>,
      _juniorTranche: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setTranchesPolicy(
      _tranchesPolicy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setWithdrawalLockoutPeriod(
      lockoutPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setYield(
      _yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    tranchesPolicy(overrides?: CallOverrides): Promise<string>

    underlyingToken(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'AdvanceRateInBpsChanged(uint256,address)'(
      advanceRateInBps?: null,
      by?: null,
    ): AdvanceRateInBpsChangedEventFilter
    AdvanceRateInBpsChanged(
      advanceRateInBps?: null,
      by?: null,
    ): AdvanceRateInBpsChangedEventFilter

    'CalendarChanged(address,address)'(
      calendar?: null,
      by?: null,
    ): CalendarChangedEventFilter
    CalendarChanged(calendar?: null, by?: null): CalendarChangedEventFilter

    'CreditApprovalExpirationChanged(uint256,address)'(
      durationInDays?: null,
      by?: null,
    ): CreditApprovalExpirationChangedEventFilter
    CreditApprovalExpirationChanged(
      durationInDays?: null,
      by?: null,
    ): CreditApprovalExpirationChangedEventFilter

    'CreditChanged(address,address)'(
      credit?: null,
      by?: null,
    ): CreditChangedEventFilter
    CreditChanged(credit?: null, by?: null): CreditChangedEventFilter

    'EARewardsAndLiquidityChanged(uint256,uint256,address)'(
      rewardRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null,
    ): EARewardsAndLiquidityChangedEventFilter
    EARewardsAndLiquidityChanged(
      rewardRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null,
    ): EARewardsAndLiquidityChangedEventFilter

    'EpochManagerChanged(address,address)'(
      epochManager?: null,
      by?: null,
    ): EpochManagerChangedEventFilter
    EpochManagerChanged(
      epochManager?: null,
      by?: null,
    ): EpochManagerChangedEventFilter

    'EvaluationAgentChanged(address,address,uint256,address)'(
      oldEA?: null,
      newEA?: null,
      newEAId?: null,
      by?: null,
    ): EvaluationAgentChangedEventFilter
    EvaluationAgentChanged(
      oldEA?: null,
      newEA?: null,
      newEAId?: null,
      by?: null,
    ): EvaluationAgentChangedEventFilter

    'EvaluationAgentRewardsWithdrawn(address,uint256,address)'(
      receiver?: null,
      amount?: null,
      by?: null,
    ): EvaluationAgentRewardsWithdrawnEventFilter
    EvaluationAgentRewardsWithdrawn(
      receiver?: null,
      amount?: null,
      by?: null,
    ): EvaluationAgentRewardsWithdrawnEventFilter

    'FeeStructureChanged(uint16,uint16,uint96,uint16,uint96,address)'(
      yieldInBps?: null,
      minPrincipalRateInBps?: null,
      lateFeeFlat?: null,
      lateFeeBps?: null,
      membershipFee?: null,
      by?: null,
    ): FeeStructureChangedEventFilter
    FeeStructureChanged(
      yieldInBps?: null,
      minPrincipalRateInBps?: null,
      lateFeeFlat?: null,
      lateFeeBps?: null,
      membershipFee?: null,
      by?: null,
    ): FeeStructureChangedEventFilter

    'FirstLossCoverChanged(uint8,address,uint16,uint96,uint96,uint16,uint16,address)'(
      index?: null,
      firstLossCover?: null,
      coverRateInBps?: null,
      coverCap?: null,
      liquidityCap?: null,
      maxPercentOfPoolValueInBps?: null,
      riskYieldMultiplier?: null,
      by?: null,
    ): FirstLossCoverChangedEventFilter
    FirstLossCoverChanged(
      index?: null,
      firstLossCover?: null,
      coverRateInBps?: null,
      coverCap?: null,
      liquidityCap?: null,
      maxPercentOfPoolValueInBps?: null,
      riskYieldMultiplier?: null,
      by?: null,
    ): FirstLossCoverChangedEventFilter

    'FrontLoadingFeesChanged(uint96,uint16,address)'(
      frontLoadingFeeFlat?: null,
      frontLoadingFeeBps?: null,
      by?: null,
    ): FrontLoadingFeesChangedEventFilter
    FrontLoadingFeesChanged(
      frontLoadingFeeFlat?: null,
      frontLoadingFeeBps?: null,
      by?: null,
    ): FrontLoadingFeesChangedEventFilter

    'HumaConfigChanged(address,address)'(
      humaConfig?: null,
      by?: null,
    ): HumaConfigChangedEventFilter
    HumaConfigChanged(
      humaConfig?: null,
      by?: null,
    ): HumaConfigChangedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'LPConfigChanged(bool,uint96,uint8,uint8,uint16,uint16,address)'(
      permissioned?: null,
      liquidityCap?: null,
      withdrawalLockoutInMonths?: null,
      maxSeniorJuniorRatio?: null,
      fixedSeniorYieldInBps?: null,
      tranchesRiskAdjustmentInBps?: null,
      by?: null,
    ): LPConfigChangedEventFilter
    LPConfigChanged(
      permissioned?: null,
      liquidityCap?: null,
      withdrawalLockoutInMonths?: null,
      maxSeniorJuniorRatio?: null,
      fixedSeniorYieldInBps?: null,
      tranchesRiskAdjustmentInBps?: null,
      by?: null,
    ): LPConfigChangedEventFilter

    'LatePaymentGracePeriodChanged(uint256,address)'(
      gracePeriodInDays?: null,
      by?: null,
    ): LatePaymentGracePeriodChangedEventFilter
    LatePaymentGracePeriodChanged(
      gracePeriodInDays?: null,
      by?: null,
    ): LatePaymentGracePeriodChangedEventFilter

    'MaxCreditLineChanged(uint256,address)'(
      maxCreditLine?: null,
      by?: null,
    ): MaxCreditLineChangedEventFilter
    MaxCreditLineChanged(
      maxCreditLine?: null,
      by?: null,
    ): MaxCreditLineChangedEventFilter

    'PoolChanged(address,address)'(
      pool?: null,
      by?: null,
    ): PoolChangedEventFilter
    PoolChanged(pool?: null, by?: null): PoolChangedEventFilter

    'PoolDefaultGracePeriodChanged(uint256,address)'(
      gracePeriodInMonths?: null,
      by?: null,
    ): PoolDefaultGracePeriodChangedEventFilter
    PoolDefaultGracePeriodChanged(
      gracePeriodInMonths?: null,
      by?: null,
    ): PoolDefaultGracePeriodChangedEventFilter

    'PoolFeeManagerChanged(address,address)'(
      poolFeeManager?: null,
      by?: null,
    ): PoolFeeManagerChangedEventFilter
    PoolFeeManagerChanged(
      poolFeeManager?: null,
      by?: null,
    ): PoolFeeManagerChangedEventFilter

    'PoolFlexCallChanged(bool,uint256,address)'(
      enabled?: null,
      windowInEpoch?: null,
      by?: null,
    ): PoolFlexCallChangedEventFilter
    PoolFlexCallChanged(
      enabled?: null,
      windowInEpoch?: null,
      by?: null,
    ): PoolFlexCallChangedEventFilter

    'PoolLiquidityCapChanged(uint256,address)'(
      liquidityCap?: null,
      by?: null,
    ): PoolLiquidityCapChangedEventFilter
    PoolLiquidityCapChanged(
      liquidityCap?: null,
      by?: null,
    ): PoolLiquidityCapChangedEventFilter

    'PoolNameChanged(string,address)'(
      name?: null,
      by?: null,
    ): PoolNameChangedEventFilter
    PoolNameChanged(name?: null, by?: null): PoolNameChangedEventFilter

    'PoolOwnerRewardsAndLiquidityChanged(uint256,uint256,address)'(
      rewardRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null,
    ): PoolOwnerRewardsAndLiquidityChangedEventFilter
    PoolOwnerRewardsAndLiquidityChanged(
      rewardRate?: null,
      liquidityRate?: null,
      by?: PromiseOrValue<string> | null,
    ): PoolOwnerRewardsAndLiquidityChangedEventFilter

    'PoolOwnerTreasuryChanged(address,address)'(
      treasury?: null,
      by?: PromiseOrValue<string> | null,
    ): PoolOwnerTreasuryChangedEventFilter
    PoolOwnerTreasuryChanged(
      treasury?: null,
      by?: PromiseOrValue<string> | null,
    ): PoolOwnerTreasuryChangedEventFilter

    'PoolPayPeriodChanged(uint256,address)'(
      number?: null,
      by?: null,
    ): PoolPayPeriodChangedEventFilter
    PoolPayPeriodChanged(
      number?: null,
      by?: null,
    ): PoolPayPeriodChangedEventFilter

    'PoolRewardsWithdrawn(address,uint256)'(
      receiver?: null,
      amount?: null,
    ): PoolRewardsWithdrawnEventFilter
    PoolRewardsWithdrawn(
      receiver?: null,
      amount?: null,
    ): PoolRewardsWithdrawnEventFilter

    'PoolSafeChanged(address,address)'(
      poolSafe?: null,
      by?: null,
    ): PoolSafeChangedEventFilter
    PoolSafeChanged(poolSafe?: null, by?: null): PoolSafeChangedEventFilter

    'PoolUnderlyingTokenChanged(address,address)'(
      underlyingToken?: null,
      by?: null,
    ): PoolUnderlyingTokenChangedEventFilter
    PoolUnderlyingTokenChanged(
      underlyingToken?: null,
      by?: null,
    ): PoolUnderlyingTokenChangedEventFilter

    'ProtocolRewardsWithdrawn(address,uint256,address)'(
      receiver?: null,
      amount?: null,
      by?: null,
    ): ProtocolRewardsWithdrawnEventFilter
    ProtocolRewardsWithdrawn(
      receiver?: null,
      amount?: null,
      by?: null,
    ): ProtocolRewardsWithdrawnEventFilter

    'ReceivableAssetChanged(address,address)'(
      receivableAsset?: null,
      by?: null,
    ): ReceivableAssetChangedEventFilter
    ReceivableAssetChanged(
      receivableAsset?: null,
      by?: null,
    ): ReceivableAssetChangedEventFilter

    'ReceivableRequiredInBpsChanged(uint256,address)'(
      receivableRequiredInBps?: null,
      by?: null,
    ): ReceivableRequiredInBpsChangedEventFilter
    ReceivableRequiredInBpsChanged(
      receivableRequiredInBps?: null,
      by?: null,
    ): ReceivableRequiredInBpsChangedEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter

    'TranchesChanged(address,address,address)'(
      seniorTranche?: null,
      juniorTranche?: null,
      by?: null,
    ): TranchesChangedEventFilter
    TranchesChanged(
      seniorTranche?: null,
      juniorTranche?: null,
      by?: null,
    ): TranchesChangedEventFilter

    'TranchesPolicyChanged(address,address)'(
      tranchesPolicy?: null,
      by?: null,
    ): TranchesPolicyChangedEventFilter
    TranchesPolicyChanged(
      tranchesPolicy?: null,
      by?: null,
    ): TranchesPolicyChangedEventFilter

    'WithdrawalLockoutPeriodChanged(uint256,address)'(
      lockoutPeriodInMonths?: null,
      by?: null,
    ): WithdrawalLockoutPeriodChangedEventFilter
    WithdrawalLockoutPeriodChanged(
      lockoutPeriodInMonths?: null,
      by?: null,
    ): WithdrawalLockoutPeriodChangedEventFilter

    'YieldChanged(uint256,address)'(
      aprInBps?: null,
      by?: null,
    ): YieldChangedEventFilter
    YieldChanged(aprInBps?: null, by?: null): YieldChangedEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    POOL_OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    calendar(overrides?: CallOverrides): Promise<BigNumber>

    checkFirstLossCoverRequirementsForAdmin(
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    checkFirstLossCoverRequirementsForRedemption(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    checkLiquidityRequirementForRedemption(
      lender: PromiseOrValue<string>,
      trancheVault: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    checkLiquidityRequirements(overrides?: CallOverrides): Promise<BigNumber>

    credit(overrides?: CallOverrides): Promise<BigNumber>

    creditDueManager(overrides?: CallOverrides): Promise<BigNumber>

    epochManager(overrides?: CallOverrides): Promise<BigNumber>

    evaluationAgent(overrides?: CallOverrides): Promise<BigNumber>

    evaluationAgentId(overrides?: CallOverrides): Promise<BigNumber>

    getAdminRnR(overrides?: CallOverrides): Promise<BigNumber>

    getFees(overrides?: CallOverrides): Promise<BigNumber>

    getFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getFirstLossCoverConfig(
      firstLossCover: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getFirstLossCovers(overrides?: CallOverrides): Promise<BigNumber>

    getFrontLoadingFees(overrides?: CallOverrides): Promise<BigNumber>

    getLPConfig(overrides?: CallOverrides): Promise<BigNumber>

    getMinPrincipalRateInBps(overrides?: CallOverrides): Promise<BigNumber>

    getPoolSettings(overrides?: CallOverrides): Promise<BigNumber>

    getPoolSummary(overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getTrancheLiquidityCap(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    humaConfig(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _poolName: PromiseOrValue<string>,
      _contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    isFirstLossCover(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    juniorTranche(overrides?: CallOverrides): Promise<BigNumber>

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    onlyPool(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    onlyPoolOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    onlyPoolOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    onlyPoolOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    onlyProtocolAndPoolOn(overrides?: CallOverrides): Promise<BigNumber>

    pool(overrides?: CallOverrides): Promise<BigNumber>

    poolFeeManager(overrides?: CallOverrides): Promise<BigNumber>

    poolName(overrides?: CallOverrides): Promise<BigNumber>

    poolOwnerTreasury(overrides?: CallOverrides): Promise<BigNumber>

    poolSafe(overrides?: CallOverrides): Promise<BigNumber>

    receivableAsset(overrides?: CallOverrides): Promise<BigNumber>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    seniorTranche(overrides?: CallOverrides): Promise<BigNumber>

    setAdvanceRateInBps(
      advanceRateInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setCalendar(
      _calendar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setCredit(
      _credit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setEARewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setEpochManager(
      _epochManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setFeeStructure(
      feeStructure: FeeStructureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      firstLossCover: PromiseOrValue<string>,
      config: FirstLossCoverConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setFrontLoadingFees(
      frontFees: FrontLoadingFeesStructureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setLPConfig(
      lpConfig: LPConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setLatePaymentGracePeriodInDays(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolDefaultGracePeriod(
      gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolFeeManager(
      _poolFeeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolOwnerRewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolOwnerTreasury(
      _poolOwnerTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolPayPeriod(
      number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolSafe(
      _poolSafe: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolUnderlyingToken(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setReceivableAsset(
      _receivableAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setReceivableRequiredInBps(
      receivableRequiredInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setTranches(
      _seniorTranche: PromiseOrValue<string>,
      _juniorTranche: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setTranchesPolicy(
      _tranchesPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setWithdrawalLockoutPeriod(
      lockoutPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setYield(
      _yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    tranchesPolicy(overrides?: CallOverrides): Promise<BigNumber>

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    POOL_OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    calendar(overrides?: CallOverrides): Promise<PopulatedTransaction>

    checkFirstLossCoverRequirementsForAdmin(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    checkFirstLossCoverRequirementsForRedemption(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    checkLiquidityRequirementForEA(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    checkLiquidityRequirementForPoolOwner(
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    checkLiquidityRequirementForRedemption(
      lender: PromiseOrValue<string>,
      trancheVault: PromiseOrValue<string>,
      newBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    checkLiquidityRequirements(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    credit(overrides?: CallOverrides): Promise<PopulatedTransaction>

    creditDueManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    epochManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    evaluationAgent(overrides?: CallOverrides): Promise<PopulatedTransaction>

    evaluationAgentId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAdminRnR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getFees(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getFirstLossCoverConfig(
      firstLossCover: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getFirstLossCovers(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getFrontLoadingFees(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLPConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMinPrincipalRateInBps(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getPoolSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPoolSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getTrancheLiquidityCap(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    humaConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _poolName: PromiseOrValue<string>,
      _contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    isFirstLossCover(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    juniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>

    onlyOwnerOrHumaMasterAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    onlyPool(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    onlyPoolOperator(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    onlyPoolOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    onlyPoolOwnerOrEA(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    onlyProtocolAndPoolOn(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolName(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolOwnerTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>

    receivableAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    seniorTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setAdvanceRateInBps(
      advanceRateInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setCalendar(
      _calendar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setCredit(
      _credit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setCreditApprovalExpiration(
      durationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setEARewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setEpochManager(
      _epochManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setEvaluationAgent(
      eaId: PromiseOrValue<BigNumberish>,
      agent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setFeeStructure(
      feeStructure: FeeStructureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setFirstLossCover(
      index: PromiseOrValue<BigNumberish>,
      firstLossCover: PromiseOrValue<string>,
      config: FirstLossCoverConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setFrontLoadingFees(
      frontFees: FrontLoadingFeesStructureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setHumaConfig(
      _humaConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setLPConfig(
      lpConfig: LPConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setLatePaymentGracePeriodInDays(
      gracePeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setMaxCreditLine(
      creditLine: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolDefaultGracePeriod(
      gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolFeeManager(
      _poolFeeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolLiquidityCap(
      liquidityCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolName(
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolOwnerRewardsAndLiquidity(
      rewardRate: PromiseOrValue<BigNumberish>,
      liquidityRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolOwnerTreasury(
      _poolOwnerTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolPayPeriod(
      number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolSafe(
      _poolSafe: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolUnderlyingToken(
      _underlyingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setReceivableAsset(
      _receivableAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setReceivableRequiredInBps(
      receivableRequiredInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setTranches(
      _seniorTranche: PromiseOrValue<string>,
      _juniorTranche: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setTranchesPolicy(
      _tranchesPolicy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setWithdrawalLockoutPeriod(
      lockoutPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setYield(
      _yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    tranchesPolicy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
