/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface FirstLossCoverInterface extends utils.Interface {
  functions: {
    'addCoverAssets(uint256)': FunctionFragment
    'addCoverProvider(address)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'convertToAssets(uint256)': FunctionFragment
    'convertToShares(uint256)': FunctionFragment
    'coverLoss(uint256)': FunctionFragment
    'coveredLoss()': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'depositCover(uint256)': FunctionFragment
    'depositCoverFor(uint256,address)': FunctionFragment
    'getAvailableCap()': FunctionFragment
    'getCoverProviders()': FunctionFragment
    'getMaxLiquidity()': FunctionFragment
    'getMinLiquidity()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,string,address)': FunctionFragment
    'initialize(address)': FunctionFragment
    'isSufficient()': FunctionFragment
    'name()': FunctionFragment
    'payoutYield()': FunctionFragment
    'pool()': FunctionFragment
    'poolConfig()': FunctionFragment
    'poolSafe()': FunctionFragment
    'recoverLoss(uint256)': FunctionFragment
    'redeemCover(uint256,address)': FunctionFragment
    'removeCoverProvider(address)': FunctionFragment
    'setPoolConfig(address)': FunctionFragment
    'symbol()': FunctionFragment
    'totalAssets()': FunctionFragment
    'totalAssetsOf(address)': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'underlyingToken()': FunctionFragment
    'updatePoolConfigData()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addCoverAssets'
      | 'addCoverProvider'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'convertToAssets'
      | 'convertToShares'
      | 'coverLoss'
      | 'coveredLoss'
      | 'decimals'
      | 'decreaseAllowance'
      | 'depositCover'
      | 'depositCoverFor'
      | 'getAvailableCap'
      | 'getCoverProviders'
      | 'getMaxLiquidity'
      | 'getMinLiquidity'
      | 'increaseAllowance'
      | 'initialize(string,string,address)'
      | 'initialize(address)'
      | 'isSufficient'
      | 'name'
      | 'payoutYield'
      | 'pool'
      | 'poolConfig'
      | 'poolSafe'
      | 'recoverLoss'
      | 'redeemCover'
      | 'removeCoverProvider'
      | 'setPoolConfig'
      | 'symbol'
      | 'totalAssets'
      | 'totalAssetsOf'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'underlyingToken'
      | 'updatePoolConfigData',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addCoverAssets',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'addCoverProvider',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'coverLoss',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'coveredLoss',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'depositCover',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'depositCoverFor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'getAvailableCap',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getCoverProviders',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getMaxLiquidity',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'getMinLiquidity',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize(string,string,address)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize(address)',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'isSufficient',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'payoutYield',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string
  encodeFunctionData(functionFragment: 'poolConfig', values?: undefined): string
  encodeFunctionData(functionFragment: 'poolSafe', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'recoverLoss',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'redeemCover',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'removeCoverProvider',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolConfig',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'totalAssetsOf',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'underlyingToken',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'updatePoolConfigData',
    values?: undefined,
  ): string

  decodeFunctionResult(
    functionFragment: 'addCoverAssets',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'addCoverProvider',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'coverLoss', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'coveredLoss', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositCover',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositCoverFor',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAvailableCap',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCoverProviders',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMaxLiquidity',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMinLiquidity',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'initialize(string,string,address)',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'initialize(address)',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isSufficient',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payoutYield', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolSafe', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'recoverLoss', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeemCover', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeCoverProvider',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolConfig',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalAssetsOf',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'underlyingToken',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatePoolConfigData',
    data: BytesLike,
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'AssetsAdded(uint256)': EventFragment
    'CoverDeposited(address,uint256,uint256)': EventFragment
    'CoverProviderAdded(address)': EventFragment
    'CoverProviderRemoved(address)': EventFragment
    'CoverRedeemed(address,address,uint256,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'LossCovered(uint256,uint256,uint256)': EventFragment
    'LossRecovered(uint256,uint256)': EventFragment
    'PoolConfigCacheUpdated(address)': EventFragment
    'PoolConfigChanged(address,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'YieldPaidout(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AssetsAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CoverDeposited'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CoverProviderAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CoverProviderRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CoverRedeemed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LossCovered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LossRecovered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigCacheUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'YieldPaidout'): EventFragment
}

export interface ApprovalEventObject {
  owner: string
  spender: string
  value: BigNumber
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface AssetsAddedEventObject {
  assets: BigNumber
}
export type AssetsAddedEvent = TypedEvent<[BigNumber], AssetsAddedEventObject>

export type AssetsAddedEventFilter = TypedEventFilter<AssetsAddedEvent>

export interface CoverDepositedEventObject {
  account: string
  assets: BigNumber
  shares: BigNumber
}
export type CoverDepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CoverDepositedEventObject
>

export type CoverDepositedEventFilter = TypedEventFilter<CoverDepositedEvent>

export interface CoverProviderAddedEventObject {
  account: string
}
export type CoverProviderAddedEvent = TypedEvent<
  [string],
  CoverProviderAddedEventObject
>

export type CoverProviderAddedEventFilter =
  TypedEventFilter<CoverProviderAddedEvent>

export interface CoverProviderRemovedEventObject {
  account: string
}
export type CoverProviderRemovedEvent = TypedEvent<
  [string],
  CoverProviderRemovedEventObject
>

export type CoverProviderRemovedEventFilter =
  TypedEventFilter<CoverProviderRemovedEvent>

export interface CoverRedeemedEventObject {
  by: string
  receiver: string
  shares: BigNumber
  assets: BigNumber
}
export type CoverRedeemedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  CoverRedeemedEventObject
>

export type CoverRedeemedEventFilter = TypedEventFilter<CoverRedeemedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface LossCoveredEventObject {
  covered: BigNumber
  remaining: BigNumber
  coveredLoss: BigNumber
}
export type LossCoveredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LossCoveredEventObject
>

export type LossCoveredEventFilter = TypedEventFilter<LossCoveredEvent>

export interface LossRecoveredEventObject {
  recovered: BigNumber
  coveredLoss: BigNumber
}
export type LossRecoveredEvent = TypedEvent<
  [BigNumber, BigNumber],
  LossRecoveredEventObject
>

export type LossRecoveredEventFilter = TypedEventFilter<LossRecoveredEvent>

export interface PoolConfigCacheUpdatedEventObject {
  poolConfig: string
}
export type PoolConfigCacheUpdatedEvent = TypedEvent<
  [string],
  PoolConfigCacheUpdatedEventObject
>

export type PoolConfigCacheUpdatedEventFilter =
  TypedEventFilter<PoolConfigCacheUpdatedEvent>

export interface PoolConfigChangedEventObject {
  newPoolConfig: string
  oldPoolConfig: string
}
export type PoolConfigChangedEvent = TypedEvent<
  [string, string],
  PoolConfigChangedEventObject
>

export type PoolConfigChangedEventFilter =
  TypedEventFilter<PoolConfigChangedEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface YieldPaidoutEventObject {
  account: string
  yields: BigNumber
}
export type YieldPaidoutEvent = TypedEvent<
  [string, BigNumber],
  YieldPaidoutEventObject
>

export type YieldPaidoutEventFilter = TypedEventFilter<YieldPaidoutEvent>

export interface FirstLossCover extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: FirstLossCoverInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addCoverAssets(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    addCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    coverLoss(
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    coveredLoss(overrides?: CallOverrides): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    depositCover(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    depositCoverFor(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    getAvailableCap(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { availableCap: BigNumber }>

    getCoverProviders(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { providers: string[] }>

    getMaxLiquidity(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxLiquidity: BigNumber }>

    getMinLiquidity(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { minLiquidity: BigNumber }>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    'initialize(string,string,address)'(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    'initialize(address)'(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    isSufficient(
      overrides?: CallOverrides,
    ): Promise<[boolean] & { sufficient: boolean }>

    name(overrides?: CallOverrides): Promise<[string]>

    payoutYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    pool(overrides?: CallOverrides): Promise<[string]>

    poolConfig(overrides?: CallOverrides): Promise<[string]>

    poolSafe(overrides?: CallOverrides): Promise<[string]>

    recoverLoss(
      recovery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    redeemCover(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    removeCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>

    totalAssetsOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets: BigNumber }>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    underlyingToken(overrides?: CallOverrides): Promise<[string]>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  addCoverAssets(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  addCoverProvider(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  convertToAssets(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  convertToShares(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  coverLoss(
    loss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  coveredLoss(overrides?: CallOverrides): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  depositCover(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  depositCoverFor(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  getAvailableCap(overrides?: CallOverrides): Promise<BigNumber>

  getCoverProviders(overrides?: CallOverrides): Promise<string[]>

  getMaxLiquidity(overrides?: CallOverrides): Promise<BigNumber>

  getMinLiquidity(overrides?: CallOverrides): Promise<BigNumber>

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  'initialize(string,string,address)'(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    _poolConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  'initialize(address)'(
    _poolConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  isSufficient(overrides?: CallOverrides): Promise<boolean>

  name(overrides?: CallOverrides): Promise<string>

  payoutYield(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  pool(overrides?: CallOverrides): Promise<string>

  poolConfig(overrides?: CallOverrides): Promise<string>

  poolSafe(overrides?: CallOverrides): Promise<string>

  recoverLoss(
    recovery: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  redeemCover(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  removeCoverProvider(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolConfig(
    _poolConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>

  totalAssetsOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  underlyingToken(overrides?: CallOverrides): Promise<string>

  updatePoolConfigData(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    addCoverAssets(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    addCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    coverLoss(
      loss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    coveredLoss(overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    depositCover(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    depositCoverFor(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getAvailableCap(overrides?: CallOverrides): Promise<BigNumber>

    getCoverProviders(overrides?: CallOverrides): Promise<string[]>

    getMaxLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    getMinLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    'initialize(string,string,address)'(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _poolConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    'initialize(address)'(
      _poolConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    isSufficient(overrides?: CallOverrides): Promise<boolean>

    name(overrides?: CallOverrides): Promise<string>

    payoutYield(overrides?: CallOverrides): Promise<void>

    pool(overrides?: CallOverrides): Promise<string>

    poolConfig(overrides?: CallOverrides): Promise<string>

    poolSafe(overrides?: CallOverrides): Promise<string>

    recoverLoss(
      recovery: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    redeemCover(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    removeCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalAssetsOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    underlyingToken(overrides?: CallOverrides): Promise<string>

    updatePoolConfigData(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter

    'AssetsAdded(uint256)'(assets?: null): AssetsAddedEventFilter
    AssetsAdded(assets?: null): AssetsAddedEventFilter

    'CoverDeposited(address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): CoverDepositedEventFilter
    CoverDeposited(
      account?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): CoverDepositedEventFilter

    'CoverProviderAdded(address)'(
      account?: PromiseOrValue<string> | null,
    ): CoverProviderAddedEventFilter
    CoverProviderAdded(
      account?: PromiseOrValue<string> | null,
    ): CoverProviderAddedEventFilter

    'CoverProviderRemoved(address)'(
      account?: PromiseOrValue<string> | null,
    ): CoverProviderRemovedEventFilter
    CoverProviderRemoved(
      account?: PromiseOrValue<string> | null,
    ): CoverProviderRemovedEventFilter

    'CoverRedeemed(address,address,uint256,uint256)'(
      by?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      shares?: null,
      assets?: null,
    ): CoverRedeemedEventFilter
    CoverRedeemed(
      by?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      shares?: null,
      assets?: null,
    ): CoverRedeemedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'LossCovered(uint256,uint256,uint256)'(
      covered?: null,
      remaining?: null,
      coveredLoss?: null,
    ): LossCoveredEventFilter
    LossCovered(
      covered?: null,
      remaining?: null,
      coveredLoss?: null,
    ): LossCoveredEventFilter

    'LossRecovered(uint256,uint256)'(
      recovered?: null,
      coveredLoss?: null,
    ): LossRecoveredEventFilter
    LossRecovered(
      recovered?: null,
      coveredLoss?: null,
    ): LossRecoveredEventFilter

    'PoolConfigCacheUpdated(address)'(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter
    PoolConfigCacheUpdated(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter

    'PoolConfigChanged(address,address)'(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter
    PoolConfigChanged(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter

    'YieldPaidout(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      yields?: null,
    ): YieldPaidoutEventFilter
    YieldPaidout(
      account?: PromiseOrValue<string> | null,
      yields?: null,
    ): YieldPaidoutEventFilter
  }

  estimateGas: {
    addCoverAssets(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    addCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    coverLoss(
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    coveredLoss(overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    depositCover(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    depositCoverFor(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    getAvailableCap(overrides?: CallOverrides): Promise<BigNumber>

    getCoverProviders(overrides?: CallOverrides): Promise<BigNumber>

    getMaxLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    getMinLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    'initialize(string,string,address)'(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    'initialize(address)'(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    isSufficient(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    payoutYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    pool(overrides?: CallOverrides): Promise<BigNumber>

    poolConfig(overrides?: CallOverrides): Promise<BigNumber>

    poolSafe(overrides?: CallOverrides): Promise<BigNumber>

    recoverLoss(
      recovery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    redeemCover(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    removeCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>

    totalAssetsOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addCoverAssets(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    addCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    coverLoss(
      loss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    coveredLoss(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    depositCover(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    depositCoverFor(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    getAvailableCap(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCoverProviders(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMaxLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMinLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    'initialize(string,string,address)'(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    isSufficient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    payoutYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>

    recoverLoss(
      recovery: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    redeemCover(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    removeCoverProvider(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalAssetsOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
