/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export type CreditConfigStruct = {
  creditLimit: PromiseOrValue<BigNumberish>
  committedAmount: PromiseOrValue<BigNumberish>
  periodDuration: PromiseOrValue<BigNumberish>
  numOfPeriods: PromiseOrValue<BigNumberish>
  yieldInBps: PromiseOrValue<BigNumberish>
  advanceRateInBps: PromiseOrValue<BigNumberish>
  revolving: PromiseOrValue<boolean>
  autoApproval: PromiseOrValue<boolean>
}

export type CreditConfigStructOutput = [
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  number,
  boolean,
  boolean,
] & {
  creditLimit: BigNumber
  committedAmount: BigNumber
  periodDuration: number
  numOfPeriods: number
  yieldInBps: number
  advanceRateInBps: number
  revolving: boolean
  autoApproval: boolean
}

export interface CreditManagerInterface extends utils.Interface {
  functions: {
    'approveBorrower(address,uint96,uint16,uint16,uint96,uint64,bool)': FunctionFragment
    'calendar()': FunctionFragment
    'closeCredit(address)': FunctionFragment
    'credit()': FunctionFragment
    'extendRemainingPeriod(address,uint256)': FunctionFragment
    'getCreditBorrower(bytes32)': FunctionFragment
    'getCreditConfig(bytes32)': FunctionFragment
    'humaConfig()': FunctionFragment
    'initialize(address)': FunctionFragment
    'isDefaultReady(bytes32)': FunctionFragment
    'onlyCreditBorrower(bytes32,address)': FunctionFragment
    'pauseCredit(address)': FunctionFragment
    'poolConfig()': FunctionFragment
    'refreshCredit(address)': FunctionFragment
    'setPoolConfig(address)': FunctionFragment
    'startCommittedCredit(address)': FunctionFragment
    'triggerDefault(address)': FunctionFragment
    'unpauseCredit(address)': FunctionFragment
    'updateLimitAndCommitment(address,uint256,uint256)': FunctionFragment
    'updatePoolConfigData()': FunctionFragment
    'updateYield(address,uint256)': FunctionFragment
    'waiveLateFee(address,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'approveBorrower'
      | 'calendar'
      | 'closeCredit'
      | 'credit'
      | 'extendRemainingPeriod'
      | 'getCreditBorrower'
      | 'getCreditConfig'
      | 'humaConfig'
      | 'initialize'
      | 'isDefaultReady'
      | 'onlyCreditBorrower'
      | 'pauseCredit'
      | 'poolConfig'
      | 'refreshCredit'
      | 'setPoolConfig'
      | 'startCommittedCredit'
      | 'triggerDefault'
      | 'unpauseCredit'
      | 'updateLimitAndCommitment'
      | 'updatePoolConfigData'
      | 'updateYield'
      | 'waiveLateFee',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'approveBorrower',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string
  encodeFunctionData(functionFragment: 'calendar', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'closeCredit',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'credit', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'extendRemainingPeriod',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getCreditBorrower',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getCreditConfig',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(functionFragment: 'humaConfig', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'isDefaultReady',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'onlyCreditBorrower',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'pauseCredit',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'poolConfig', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'refreshCredit',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'setPoolConfig',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'startCommittedCredit',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'triggerDefault',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseCredit',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'updateLimitAndCommitment',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'updatePoolConfigData',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'updateYield',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'waiveLateFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string

  decodeFunctionResult(
    functionFragment: 'approveBorrower',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'calendar', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'closeCredit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'credit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'extendRemainingPeriod',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCreditBorrower',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCreditConfig',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'humaConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isDefaultReady',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onlyCreditBorrower',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'pauseCredit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolConfig', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'refreshCredit',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPoolConfig',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'startCommittedCredit',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'triggerDefault',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseCredit',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateLimitAndCommitment',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatePoolConfigData',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'updateYield', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'waiveLateFee',
    data: BytesLike,
  ): Result

  events: {
    'CommittedCreditStarted(bytes32)': EventFragment
    'CreditConfigChanged(bytes32,uint256,uint256,uint8,uint256,uint256,bool,uint256,bool)': EventFragment
    'CreditLineApproved(address,bytes32,uint256,uint8,uint256,uint256,uint256,bool)': EventFragment
    'CreditLineClosed(address,address,uint8)': EventFragment
    'CreditPaused(bytes32)': EventFragment
    'DefaultTriggered(bytes32,uint256,uint256,uint256,address)': EventFragment
    'Initialized(uint8)': EventFragment
    'LateFeeWaived(address,uint256)': EventFragment
    'PoolConfigCacheUpdated(address)': EventFragment
    'PoolConfigChanged(address,address)': EventFragment
    'RemainingPeriodsExtended(bytes32,uint256,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CommittedCreditStarted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreditConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreditLineApproved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreditLineClosed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CreditPaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DefaultTriggered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LateFeeWaived'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigCacheUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PoolConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RemainingPeriodsExtended'): EventFragment
}

export interface CommittedCreditStartedEventObject {
  creditHash: string
}
export type CommittedCreditStartedEvent = TypedEvent<
  [string],
  CommittedCreditStartedEventObject
>

export type CommittedCreditStartedEventFilter =
  TypedEventFilter<CommittedCreditStartedEvent>

export interface CreditConfigChangedEventObject {
  creditHash: string
  creditLimit: BigNumber
  committedAmount: BigNumber
  periodDuration: number
  numOfPeriods: BigNumber
  yieldInBps: BigNumber
  revolving: boolean
  advanceRateInBps: BigNumber
  autoApproval: boolean
}
export type CreditConfigChangedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
  ],
  CreditConfigChangedEventObject
>

export type CreditConfigChangedEventFilter =
  TypedEventFilter<CreditConfigChangedEvent>

export interface CreditLineApprovedEventObject {
  borrower: string
  creditHash: string
  creditLimit: BigNumber
  periodDuration: number
  remainingPeriods: BigNumber
  yieldInBps: BigNumber
  committedAmount: BigNumber
  revolving: boolean
}
export type CreditLineApprovedEvent = TypedEvent<
  [string, string, BigNumber, number, BigNumber, BigNumber, BigNumber, boolean],
  CreditLineApprovedEventObject
>

export type CreditLineApprovedEventFilter =
  TypedEventFilter<CreditLineApprovedEvent>

export interface CreditLineClosedEventObject {
  borrower: string
  by: string
  reasonCode: number
}
export type CreditLineClosedEvent = TypedEvent<
  [string, string, number],
  CreditLineClosedEventObject
>

export type CreditLineClosedEventFilter =
  TypedEventFilter<CreditLineClosedEvent>

export interface CreditPausedEventObject {
  creditHash: string
}
export type CreditPausedEvent = TypedEvent<[string], CreditPausedEventObject>

export type CreditPausedEventFilter = TypedEventFilter<CreditPausedEvent>

export interface DefaultTriggeredEventObject {
  creditHash: string
  principalLoss: BigNumber
  yieldLoss: BigNumber
  feesLoss: BigNumber
  by: string
}
export type DefaultTriggeredEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  DefaultTriggeredEventObject
>

export type DefaultTriggeredEventFilter =
  TypedEventFilter<DefaultTriggeredEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface LateFeeWaivedEventObject {
  borrower: string
  amountWaived: BigNumber
}
export type LateFeeWaivedEvent = TypedEvent<
  [string, BigNumber],
  LateFeeWaivedEventObject
>

export type LateFeeWaivedEventFilter = TypedEventFilter<LateFeeWaivedEvent>

export interface PoolConfigCacheUpdatedEventObject {
  poolConfig: string
}
export type PoolConfigCacheUpdatedEvent = TypedEvent<
  [string],
  PoolConfigCacheUpdatedEventObject
>

export type PoolConfigCacheUpdatedEventFilter =
  TypedEventFilter<PoolConfigCacheUpdatedEvent>

export interface PoolConfigChangedEventObject {
  newPoolConfig: string
  oldPoolConfig: string
}
export type PoolConfigChangedEvent = TypedEvent<
  [string, string],
  PoolConfigChangedEventObject
>

export type PoolConfigChangedEventFilter =
  TypedEventFilter<PoolConfigChangedEvent>

export interface RemainingPeriodsExtendedEventObject {
  creditHash: string
  oldRemainingPeriods: BigNumber
  newRemainingPeriods: BigNumber
  by: string
}
export type RemainingPeriodsExtendedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  RemainingPeriodsExtendedEventObject
>

export type RemainingPeriodsExtendedEventFilter =
  TypedEventFilter<RemainingPeriodsExtendedEvent>

export interface CreditManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: CreditManagerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    approveBorrower(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      designatedStartDate: PromiseOrValue<BigNumberish>,
      revolving: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    calendar(overrides?: CallOverrides): Promise<[string]>

    closeCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    credit(overrides?: CallOverrides): Promise<[string]>

    extendRemainingPeriod(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    getCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getCreditConfig(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[CreditConfigStructOutput]>

    humaConfig(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    isDefaultReady(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isDefault: boolean }>

    onlyCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[void]>

    pauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    poolConfig(overrides?: CallOverrides): Promise<[string]>

    refreshCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    startCommittedCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    unpauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateLimitAndCommitment(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    updateYield(
      borrower: PromiseOrValue<string>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    waiveLateFee(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  approveBorrower(
    borrower: PromiseOrValue<string>,
    creditLimit: PromiseOrValue<BigNumberish>,
    remainingPeriods: PromiseOrValue<BigNumberish>,
    yieldInBps: PromiseOrValue<BigNumberish>,
    committedAmount: PromiseOrValue<BigNumberish>,
    designatedStartDate: PromiseOrValue<BigNumberish>,
    revolving: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  calendar(overrides?: CallOverrides): Promise<string>

  closeCredit(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  credit(overrides?: CallOverrides): Promise<string>

  extendRemainingPeriod(
    borrower: PromiseOrValue<string>,
    numOfPeriods: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  getCreditBorrower(
    creditHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  getCreditConfig(
    creditHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<CreditConfigStructOutput>

  humaConfig(overrides?: CallOverrides): Promise<string>

  initialize(
    _poolConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  isDefaultReady(
    creditHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>

  onlyCreditBorrower(
    creditHash: PromiseOrValue<BytesLike>,
    borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<void>

  pauseCredit(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  poolConfig(overrides?: CallOverrides): Promise<string>

  refreshCredit(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setPoolConfig(
    _poolConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  startCommittedCredit(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  triggerDefault(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  unpauseCredit(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateLimitAndCommitment(
    borrower: PromiseOrValue<string>,
    creditLimit: PromiseOrValue<BigNumberish>,
    committedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updatePoolConfigData(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  updateYield(
    borrower: PromiseOrValue<string>,
    yieldInBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  waiveLateFee(
    borrower: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    approveBorrower(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      designatedStartDate: PromiseOrValue<BigNumberish>,
      revolving: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>

    calendar(overrides?: CallOverrides): Promise<string>

    closeCredit(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    credit(overrides?: CallOverrides): Promise<string>

    extendRemainingPeriod(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    getCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    getCreditConfig(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<CreditConfigStructOutput>

    humaConfig(overrides?: CallOverrides): Promise<string>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    isDefaultReady(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>

    onlyCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    pauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    poolConfig(overrides?: CallOverrides): Promise<string>

    refreshCredit(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    startCommittedCredit(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        principalLoss: BigNumber
        yieldLoss: BigNumber
        feesLoss: BigNumber
      }
    >

    unpauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    updateLimitAndCommitment(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    updatePoolConfigData(overrides?: CallOverrides): Promise<void>

    updateYield(
      borrower: PromiseOrValue<string>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    waiveLateFee(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'CommittedCreditStarted(bytes32)'(
      creditHash?: PromiseOrValue<BytesLike> | null,
    ): CommittedCreditStartedEventFilter
    CommittedCreditStarted(
      creditHash?: PromiseOrValue<BytesLike> | null,
    ): CommittedCreditStartedEventFilter

    'CreditConfigChanged(bytes32,uint256,uint256,uint8,uint256,uint256,bool,uint256,bool)'(
      creditHash?: PromiseOrValue<BytesLike> | null,
      creditLimit?: null,
      committedAmount?: null,
      periodDuration?: null,
      numOfPeriods?: null,
      yieldInBps?: null,
      revolving?: null,
      advanceRateInBps?: null,
      autoApproval?: null,
    ): CreditConfigChangedEventFilter
    CreditConfigChanged(
      creditHash?: PromiseOrValue<BytesLike> | null,
      creditLimit?: null,
      committedAmount?: null,
      periodDuration?: null,
      numOfPeriods?: null,
      yieldInBps?: null,
      revolving?: null,
      advanceRateInBps?: null,
      autoApproval?: null,
    ): CreditConfigChangedEventFilter

    'CreditLineApproved(address,bytes32,uint256,uint8,uint256,uint256,uint256,bool)'(
      borrower?: PromiseOrValue<string> | null,
      creditHash?: PromiseOrValue<BytesLike> | null,
      creditLimit?: null,
      periodDuration?: null,
      remainingPeriods?: null,
      yieldInBps?: null,
      committedAmount?: null,
      revolving?: null,
    ): CreditLineApprovedEventFilter
    CreditLineApproved(
      borrower?: PromiseOrValue<string> | null,
      creditHash?: PromiseOrValue<BytesLike> | null,
      creditLimit?: null,
      periodDuration?: null,
      remainingPeriods?: null,
      yieldInBps?: null,
      committedAmount?: null,
      revolving?: null,
    ): CreditLineApprovedEventFilter

    'CreditLineClosed(address,address,uint8)'(
      borrower?: PromiseOrValue<string> | null,
      by?: null,
      reasonCode?: null,
    ): CreditLineClosedEventFilter
    CreditLineClosed(
      borrower?: PromiseOrValue<string> | null,
      by?: null,
      reasonCode?: null,
    ): CreditLineClosedEventFilter

    'CreditPaused(bytes32)'(
      creditHash?: PromiseOrValue<BytesLike> | null,
    ): CreditPausedEventFilter
    CreditPaused(
      creditHash?: PromiseOrValue<BytesLike> | null,
    ): CreditPausedEventFilter

    'DefaultTriggered(bytes32,uint256,uint256,uint256,address)'(
      creditHash?: PromiseOrValue<BytesLike> | null,
      principalLoss?: null,
      yieldLoss?: null,
      feesLoss?: null,
      by?: null,
    ): DefaultTriggeredEventFilter
    DefaultTriggered(
      creditHash?: PromiseOrValue<BytesLike> | null,
      principalLoss?: null,
      yieldLoss?: null,
      feesLoss?: null,
      by?: null,
    ): DefaultTriggeredEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'LateFeeWaived(address,uint256)'(
      borrower?: null,
      amountWaived?: null,
    ): LateFeeWaivedEventFilter
    LateFeeWaived(
      borrower?: null,
      amountWaived?: null,
    ): LateFeeWaivedEventFilter

    'PoolConfigCacheUpdated(address)'(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter
    PoolConfigCacheUpdated(
      poolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigCacheUpdatedEventFilter

    'PoolConfigChanged(address,address)'(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter
    PoolConfigChanged(
      newPoolConfig?: PromiseOrValue<string> | null,
      oldPoolConfig?: PromiseOrValue<string> | null,
    ): PoolConfigChangedEventFilter

    'RemainingPeriodsExtended(bytes32,uint256,uint256,address)'(
      creditHash?: PromiseOrValue<BytesLike> | null,
      oldRemainingPeriods?: null,
      newRemainingPeriods?: null,
      by?: null,
    ): RemainingPeriodsExtendedEventFilter
    RemainingPeriodsExtended(
      creditHash?: PromiseOrValue<BytesLike> | null,
      oldRemainingPeriods?: null,
      newRemainingPeriods?: null,
      by?: null,
    ): RemainingPeriodsExtendedEventFilter
  }

  estimateGas: {
    approveBorrower(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      designatedStartDate: PromiseOrValue<BigNumberish>,
      revolving: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    calendar(overrides?: CallOverrides): Promise<BigNumber>

    closeCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    credit(overrides?: CallOverrides): Promise<BigNumber>

    extendRemainingPeriod(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    getCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getCreditConfig(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    humaConfig(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    isDefaultReady(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    onlyCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    pauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    poolConfig(overrides?: CallOverrides): Promise<BigNumber>

    refreshCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    startCommittedCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    unpauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateLimitAndCommitment(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    updateYield(
      borrower: PromiseOrValue<string>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    waiveLateFee(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    approveBorrower(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      remainingPeriods: PromiseOrValue<BigNumberish>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      designatedStartDate: PromiseOrValue<BigNumberish>,
      revolving: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    calendar(overrides?: CallOverrides): Promise<PopulatedTransaction>

    closeCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    credit(overrides?: CallOverrides): Promise<PopulatedTransaction>

    extendRemainingPeriod(
      borrower: PromiseOrValue<string>,
      numOfPeriods: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    getCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getCreditConfig(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    humaConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    isDefaultReady(
      creditHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    onlyCreditBorrower(
      creditHash: PromiseOrValue<BytesLike>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    pauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    poolConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    refreshCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setPoolConfig(
      _poolConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    startCommittedCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    triggerDefault(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    unpauseCredit(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateLimitAndCommitment(
      borrower: PromiseOrValue<string>,
      creditLimit: PromiseOrValue<BigNumberish>,
      committedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updatePoolConfigData(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    updateYield(
      borrower: PromiseOrValue<string>,
      yieldInBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    waiveLateFee(
      borrower: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
