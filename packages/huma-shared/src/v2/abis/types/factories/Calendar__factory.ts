/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { Calendar, CalendarInterface } from '../Calendar'

const _abi = [
  {
    inputs: [],
    name: 'StartDateLaterThanEndDate',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'startDate',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'endDate',
        type: 'uint256',
      },
    ],
    name: 'getDaysDiff',
    outputs: [
      {
        internalType: 'uint256',
        name: 'daysDiff',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'enum PayPeriodDuration',
        name: 'periodDuration',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'numPeriodsPassed',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256',
      },
    ],
    name: 'getDaysDiffSincePreviousPeriodStart',
    outputs: [
      {
        internalType: 'uint256',
        name: 'daysDiff',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'endDate',
        type: 'uint256',
      },
    ],
    name: 'getDaysRemainingInPeriod',
    outputs: [
      {
        internalType: 'uint256',
        name: 'daysRemaining',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'enum PayPeriodDuration',
        name: 'periodDuration',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'startDate',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'endDate',
        type: 'uint256',
      },
    ],
    name: 'getNumPeriodsPassed',
    outputs: [
      {
        internalType: 'uint256',
        name: 'numPeriodsPassed',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'enum PayPeriodDuration',
        name: 'periodDuration',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256',
      },
    ],
    name: 'getStartDateOfNextPeriod',
    outputs: [
      {
        internalType: 'uint256',
        name: 'startOfNextPeriod',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'enum PayPeriodDuration',
        name: 'periodDuration',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256',
      },
    ],
    name: 'getStartDateOfPeriod',
    outputs: [
      {
        internalType: 'uint256',
        name: 'startOfPeriod',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256',
      },
    ],
    name: 'getStartOfNextDay',
    outputs: [
      {
        internalType: 'uint256',
        name: 'startOfNextDay',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'enum PayPeriodDuration',
        name: 'periodDuration',
        type: 'uint8',
      },
    ],
    name: 'getTotalDaysInFullPeriod',
    outputs: [
      {
        internalType: 'uint256',
        name: 'totalDaysInPeriod',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const

export class Calendar__factory {
  static readonly abi = _abi
  static createInterface(): CalendarInterface {
    return new utils.Interface(_abi) as CalendarInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Calendar {
    return new Contract(address, _abi, signerOrProvider) as Calendar
  }
}
