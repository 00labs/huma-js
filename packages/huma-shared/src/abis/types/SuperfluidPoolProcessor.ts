/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace SuperfluidPoolProcessorStorage {
  export type StreamInfoStruct = {
    borrower: PromiseOrValue<string>
    flowrate: PromiseOrValue<BigNumberish>
    lastStartTime: PromiseOrValue<BigNumberish>
    endTime: PromiseOrValue<BigNumberish>
    receivedFlowAmount: PromiseOrValue<BigNumberish>
    flowKey: PromiseOrValue<BytesLike>
  }

  export type StreamInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ] & {
    borrower: string
    flowrate: BigNumber
    lastStartTime: BigNumber
    endTime: BigNumber
    receivedFlowAmount: BigNumber
    flowKey: string
  }
}

export interface SuperfluidPoolProcessorInterface extends utils.Interface {
  functions: {
    'afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)': FunctionFragment
    'afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)': FunctionFragment
    'afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)': FunctionFragment
    'beforeAgreementCreated(address,address,bytes32,bytes,bytes)': FunctionFragment
    'beforeAgreementTerminated(address,address,bytes32,bytes,bytes)': FunctionFragment
    'beforeAgreementUpdated(address,address,bytes32,bytes,bytes)': FunctionFragment
    'cfa()': FunctionFragment
    'flowEndMapping(bytes32)': FunctionFragment
    'host()': FunctionFragment
    'initialize(address,address,address,address)': FunctionFragment
    'mintAndDrawdown(address,uint256,address,bytes)': FunctionFragment
    'onTerminatedFlow(bytes32,uint256)': FunctionFragment
    'pool()': FunctionFragment
    'settlement(address,uint256)': FunctionFragment
    'streamInfoMapping(uint256)': FunctionFragment
    'tradableStream()': FunctionFragment
    'tryTransferAllowance(address,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'afterAgreementCreated'
      | 'afterAgreementTerminated'
      | 'afterAgreementUpdated'
      | 'beforeAgreementCreated'
      | 'beforeAgreementTerminated'
      | 'beforeAgreementUpdated'
      | 'cfa'
      | 'flowEndMapping'
      | 'host'
      | 'initialize'
      | 'mintAndDrawdown'
      | 'onTerminatedFlow'
      | 'pool'
      | 'settlement'
      | 'streamInfoMapping'
      | 'tradableStream'
      | 'tryTransferAllowance',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'afterAgreementCreated',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'afterAgreementTerminated',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'afterAgreementUpdated',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'beforeAgreementCreated',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'beforeAgreementTerminated',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'beforeAgreementUpdated',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(functionFragment: 'cfa', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'flowEndMapping',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(functionFragment: 'host', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'mintAndDrawdown',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'onTerminatedFlow',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'settlement',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'streamInfoMapping',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'tradableStream',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'tryTransferAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string

  decodeFunctionResult(
    functionFragment: 'afterAgreementCreated',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'afterAgreementTerminated',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'afterAgreementUpdated',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'beforeAgreementCreated',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'beforeAgreementTerminated',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'beforeAgreementUpdated',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'cfa', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'flowEndMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'host', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintAndDrawdown',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'onTerminatedFlow',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settlement', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'streamInfoMapping',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'tradableStream',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'tryTransferAllowance',
    data: BytesLike,
  ): Result

  events: {
    'DrawdownMadeWithReceivable(address,uint256,uint256,address,uint256)': EventFragment
    'FlowIsTerminated(bytes32,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'NotGettingEnoughAllowance(address,uint256,address)': EventFragment
    'ReadyToSettlement(address,uint256,uint256)': EventFragment
    'ReceivableFlowKey(address,uint256,bytes32)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DrawdownMadeWithReceivable'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FlowIsTerminated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NotGettingEnoughAllowance'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReadyToSettlement'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReceivableFlowKey'): EventFragment
}

export interface DrawdownMadeWithReceivableEventObject {
  borrower: string
  borrowAmount: BigNumber
  netAmountToBorrower: BigNumber
  receivableAsset: string
  receivableTokenId: BigNumber
}
export type DrawdownMadeWithReceivableEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  DrawdownMadeWithReceivableEventObject
>

export type DrawdownMadeWithReceivableEventFilter =
  TypedEventFilter<DrawdownMadeWithReceivableEvent>

export interface FlowIsTerminatedEventObject {
  flowKey: string
  endTime: BigNumber
}
export type FlowIsTerminatedEvent = TypedEvent<
  [string, BigNumber],
  FlowIsTerminatedEventObject
>

export type FlowIsTerminatedEventFilter =
  TypedEventFilter<FlowIsTerminatedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface NotGettingEnoughAllowanceEventObject {
  receivableAsset: string
  receivableId: BigNumber
  borrower: string
}
export type NotGettingEnoughAllowanceEvent = TypedEvent<
  [string, BigNumber, string],
  NotGettingEnoughAllowanceEventObject
>

export type NotGettingEnoughAllowanceEventFilter =
  TypedEventFilter<NotGettingEnoughAllowanceEvent>

export interface ReadyToSettlementEventObject {
  receivableAsset: string
  receivableId: BigNumber
  readyTime: BigNumber
}
export type ReadyToSettlementEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReadyToSettlementEventObject
>

export type ReadyToSettlementEventFilter =
  TypedEventFilter<ReadyToSettlementEvent>

export interface ReceivableFlowKeyEventObject {
  borrower: string
  receivableId: BigNumber
  flowKey: string
}
export type ReceivableFlowKeyEvent = TypedEvent<
  [string, BigNumber, string],
  ReceivableFlowKeyEventObject
>

export type ReceivableFlowKeyEventFilter =
  TypedEventFilter<ReceivableFlowKeyEvent>

export interface SuperfluidPoolProcessor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SuperfluidPoolProcessorInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    afterAgreementCreated(
      arg0: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    afterAgreementTerminated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    afterAgreementUpdated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    beforeAgreementCreated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    beforeAgreementTerminated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    beforeAgreementUpdated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    cfa(overrides?: CallOverrides): Promise<[string]>

    flowEndMapping(
      flowKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { endTime: BigNumber }>

    host(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _pool: PromiseOrValue<string>,
      _host: PromiseOrValue<string>,
      _cfa: PromiseOrValue<string>,
      _tradableStream: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    mintAndDrawdown(
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      receivableAsset: PromiseOrValue<string>,
      dataForMintTo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    onTerminatedFlow(
      flowKey: PromiseOrValue<BytesLike>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    pool(overrides?: CallOverrides): Promise<[string]>

    settlement(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    streamInfoMapping(
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[SuperfluidPoolProcessorStorage.StreamInfoStructOutput]>

    tradableStream(overrides?: CallOverrides): Promise<[string]>

    tryTransferAllowance(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  afterAgreementCreated(
    arg0: PromiseOrValue<string>,
    _agreementClass: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    _ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  afterAgreementTerminated(
    _superToken: PromiseOrValue<string>,
    _agreementClass: PromiseOrValue<string>,
    _agreementId: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    _ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  afterAgreementUpdated(
    _superToken: PromiseOrValue<string>,
    _agreementClass: PromiseOrValue<string>,
    _agreementId: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    _ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  beforeAgreementCreated(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  beforeAgreementTerminated(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  beforeAgreementUpdated(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  cfa(overrides?: CallOverrides): Promise<string>

  flowEndMapping(
    flowKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  host(overrides?: CallOverrides): Promise<string>

  initialize(
    _pool: PromiseOrValue<string>,
    _host: PromiseOrValue<string>,
    _cfa: PromiseOrValue<string>,
    _tradableStream: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  mintAndDrawdown(
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    receivableAsset: PromiseOrValue<string>,
    dataForMintTo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  onTerminatedFlow(
    flowKey: PromiseOrValue<BytesLike>,
    receivableId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  pool(overrides?: CallOverrides): Promise<string>

  settlement(
    receivableAsset: PromiseOrValue<string>,
    receivableId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  streamInfoMapping(
    receivableId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<SuperfluidPoolProcessorStorage.StreamInfoStructOutput>

  tradableStream(overrides?: CallOverrides): Promise<string>

  tryTransferAllowance(
    receivableAsset: PromiseOrValue<string>,
    receivableId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    afterAgreementCreated(
      arg0: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    afterAgreementTerminated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    afterAgreementUpdated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    beforeAgreementCreated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    beforeAgreementTerminated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    beforeAgreementUpdated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    cfa(overrides?: CallOverrides): Promise<string>

    flowEndMapping(
      flowKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    host(overrides?: CallOverrides): Promise<string>

    initialize(
      _pool: PromiseOrValue<string>,
      _host: PromiseOrValue<string>,
      _cfa: PromiseOrValue<string>,
      _tradableStream: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    mintAndDrawdown(
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      receivableAsset: PromiseOrValue<string>,
      dataForMintTo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>

    onTerminatedFlow(
      flowKey: PromiseOrValue<BytesLike>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    pool(overrides?: CallOverrides): Promise<string>

    settlement(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    streamInfoMapping(
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<SuperfluidPoolProcessorStorage.StreamInfoStructOutput>

    tradableStream(overrides?: CallOverrides): Promise<string>

    tryTransferAllowance(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'DrawdownMadeWithReceivable(address,uint256,uint256,address,uint256)'(
      borrower?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      netAmountToBorrower?: null,
      receivableAsset?: null,
      receivableTokenId?: null,
    ): DrawdownMadeWithReceivableEventFilter
    DrawdownMadeWithReceivable(
      borrower?: PromiseOrValue<string> | null,
      borrowAmount?: null,
      netAmountToBorrower?: null,
      receivableAsset?: null,
      receivableTokenId?: null,
    ): DrawdownMadeWithReceivableEventFilter

    'FlowIsTerminated(bytes32,uint256)'(
      flowKey?: null,
      endTime?: null,
    ): FlowIsTerminatedEventFilter
    FlowIsTerminated(
      flowKey?: null,
      endTime?: null,
    ): FlowIsTerminatedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'NotGettingEnoughAllowance(address,uint256,address)'(
      receivableAsset?: null,
      receivableId?: null,
      borrower?: null,
    ): NotGettingEnoughAllowanceEventFilter
    NotGettingEnoughAllowance(
      receivableAsset?: null,
      receivableId?: null,
      borrower?: null,
    ): NotGettingEnoughAllowanceEventFilter

    'ReadyToSettlement(address,uint256,uint256)'(
      receivableAsset?: null,
      receivableId?: null,
      readyTime?: null,
    ): ReadyToSettlementEventFilter
    ReadyToSettlement(
      receivableAsset?: null,
      receivableId?: null,
      readyTime?: null,
    ): ReadyToSettlementEventFilter

    'ReceivableFlowKey(address,uint256,bytes32)'(
      borrower?: null,
      receivableId?: null,
      flowKey?: null,
    ): ReceivableFlowKeyEventFilter
    ReceivableFlowKey(
      borrower?: null,
      receivableId?: null,
      flowKey?: null,
    ): ReceivableFlowKeyEventFilter
  }

  estimateGas: {
    afterAgreementCreated(
      arg0: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    afterAgreementTerminated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    afterAgreementUpdated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    beforeAgreementCreated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    beforeAgreementTerminated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    beforeAgreementUpdated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    cfa(overrides?: CallOverrides): Promise<BigNumber>

    flowEndMapping(
      flowKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    host(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _pool: PromiseOrValue<string>,
      _host: PromiseOrValue<string>,
      _cfa: PromiseOrValue<string>,
      _tradableStream: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    mintAndDrawdown(
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      receivableAsset: PromiseOrValue<string>,
      dataForMintTo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    onTerminatedFlow(
      flowKey: PromiseOrValue<BytesLike>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    pool(overrides?: CallOverrides): Promise<BigNumber>

    settlement(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    streamInfoMapping(
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    tradableStream(overrides?: CallOverrides): Promise<BigNumber>

    tryTransferAllowance(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    afterAgreementCreated(
      arg0: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    afterAgreementTerminated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    afterAgreementUpdated(
      _superToken: PromiseOrValue<string>,
      _agreementClass: PromiseOrValue<string>,
      _agreementId: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      _ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    beforeAgreementCreated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    beforeAgreementTerminated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    beforeAgreementUpdated(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    cfa(overrides?: CallOverrides): Promise<PopulatedTransaction>

    flowEndMapping(
      flowKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _pool: PromiseOrValue<string>,
      _host: PromiseOrValue<string>,
      _cfa: PromiseOrValue<string>,
      _tradableStream: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    mintAndDrawdown(
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      receivableAsset: PromiseOrValue<string>,
      dataForMintTo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    onTerminatedFlow(
      flowKey: PromiseOrValue<BytesLike>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    settlement(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    streamInfoMapping(
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    tradableStream(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tryTransferAllowance(
      receivableAsset: PromiseOrValue<string>,
      receivableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
